'use client'

import React, { useState, useEffect } from 'react'
import { 
  Monitor, 
  Smartphone, 
  Wifi, 
  WifiOff, 
  Bell, 
  Download, 
  Database,
  Activity,
  Users,
  TrendingUp,
  AlertTriangle
} from 'lucide-react'
import { usePWA } from '@/lib/pwa-utils'

interface PWAMetrics {
  installations: number
  activeUsers: number
  offlineUsage: number
  notificationsSent: number
  cacheHitRate: number
  updateSuccess: number
}

interface CacheStatus {
  [cacheName: string]: number
}

export default function PWADashboard() {
  const { isInstalled, isOnline, cacheUtils, notificationUtils } = usePWA()
  const [metrics, setMetrics] = useState<PWAMetrics>({
    installations: 0,
    activeUsers: 0,
    offlineUsage: 0,
    notificationsSent: 0,
    cacheHitRate: 0,
    updateSuccess: 0
  })
  const [cacheStatus, setCacheStatus] = useState<CacheStatus>({})
  const [notificationPermission, setNotificationPermission] = useState<NotificationPermission>('default')
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    loadPWAData()
    setNotificationPermission(notificationUtils.getPermissionStatus())
  }, [])

  const loadPWAData = async () => {
    try {
      setIsLoading(true)

      // Load cache status
      const cacheData = await cacheUtils.getCacheStatus()
      setCacheStatus(cacheData)

      // Load notification stats (from server)
      const notificationResponse = await fetch('/api/notifications/subscribe')
      const notificationData = await notificationResponse.json()

      // Mock metrics (in production, get from analytics)
      setMetrics({
        installations: 1250,
        activeUsers: 850,
        offlineUsage: 320,
        notificationsSent: notificationData.total || 0,
        cacheHitRate: 85.2,
        updateSuccess: 98.5
      })
    } catch (error) {
      console.error('Failed to load PWA data:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const sendTestNotification = async () => {
    try {
      await fetch('/api/notifications/send', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          recipients: 'all',
          notification: {
            title: 'ðŸ§ª Test Notification',
            body: 'This is a test notification from PWA Dashboard',
            type: 'system',
            icon: '/icons/test-notification.png',
            data: { test: true }
          }
        })
      })
      
      await loadPWAData() // Refresh data
    } catch (error) {
      console.error('Failed to send test notification:', error)
    }
  }

  const clearAllCaches = async () => {
    if (confirm('Are you sure you want to clear all caches?')) {
      await cacheUtils.clearAllCaches()
      await loadPWAData()
    }
  }

  if (isLoading) {
    return (
      <div className="bg-gray-900 rounded-lg p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-700 rounded w-1/3"></div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {[...Array(6)].map((_, i) => (
              <div key={i} className="h-24 bg-gray-700 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-900 to-purple-900 rounded-lg p-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="bg-blue-500 rounded-lg p-2">
              <Smartphone className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-white">PWA Dashboard</h1>
              <p className="text-blue-200">Progressive Web App Analytics & Management</p>
            </div>
          </div>
          
          <div className="flex items-center space-x-4">
            <div className={`flex items-center space-x-2 px-3 py-2 rounded-lg ${
              isOnline ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'
            }`}>
              {isOnline ? <Wifi className="w-4 h-4" /> : <WifiOff className="w-4 h-4" />}
              <span className="text-sm font-medium">
                {isOnline ? 'Online' : 'Offline'}
              </span>
            </div>
            
            <div className={`flex items-center space-x-2 px-3 py-2 rounded-lg ${
              isInstalled ? 'bg-blue-500/20 text-blue-300' : 'bg-gray-500/20 text-gray-300'
            }`}>
              <Monitor className="w-4 h-4" />
              <span className="text-sm font-medium">
                {isInstalled ? 'PWA Mode' : 'Browser'}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Metrics Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* Installations */}
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm font-medium">Total Installations</p>
              <p className="text-3xl font-bold text-white">{metrics.installations.toLocaleString()}</p>
            </div>
            <div className="bg-green-500/20 rounded-lg p-3">
              <Download className="w-6 h-6 text-green-400" />
            </div>
          </div>
          <div className="mt-4 flex items-center text-sm">
            <TrendingUp className="w-4 h-4 text-green-400 mr-1" />
            <span className="text-green-400">+12.5%</span>
            <span className="text-gray-400 ml-1">vs last month</span>
          </div>
        </div>

        {/* Active Users */}
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm font-medium">Active Users</p>
              <p className="text-3xl font-bold text-white">{metrics.activeUsers.toLocaleString()}</p>
            </div>
            <div className="bg-blue-500/20 rounded-lg p-3">
              <Users className="w-6 h-6 text-blue-400" />
            </div>
          </div>
          <div className="mt-4 flex items-center text-sm">
            <Activity className="w-4 h-4 text-blue-400 mr-1" />
            <span className="text-blue-400">68%</span>
            <span className="text-gray-400 ml-1">retention rate</span>
          </div>
        </div>

        {/* Offline Usage */}
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm font-medium">Offline Sessions</p>
              <p className="text-3xl font-bold text-white">{metrics.offlineUsage.toLocaleString()}</p>
            </div>
            <div className="bg-purple-500/20 rounded-lg p-3">
              <WifiOff className="w-6 h-6 text-purple-400" />
            </div>
          </div>
          <div className="mt-4 flex items-center text-sm">
            <span className="text-purple-400">25.6%</span>
            <span className="text-gray-400 ml-1">of total sessions</span>
          </div>
        </div>

        {/* Push Notifications */}
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm font-medium">Notifications Sent</p>
              <p className="text-3xl font-bold text-white">{metrics.notificationsSent.toLocaleString()}</p>
            </div>
            <div className="bg-yellow-500/20 rounded-lg p-3">
              <Bell className="w-6 h-6 text-yellow-400" />
            </div>
          </div>
          <div className="mt-4 flex items-center justify-between">
            <div className="text-sm">
              <span className={`font-medium ${
                notificationPermission === 'granted' ? 'text-green-400' : 'text-red-400'
              }`}>
                {notificationPermission.charAt(0).toUpperCase() + notificationPermission.slice(1)}
              </span>
              <span className="text-gray-400 ml-1">permission</span>
            </div>
            <button
              onClick={sendTestNotification}
              className="px-3 py-1 bg-yellow-500/20 text-yellow-400 rounded text-xs hover:bg-yellow-500/30 transition-colors"
            >
              Send Test
            </button>
          </div>
        </div>

        {/* Cache Hit Rate */}
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm font-medium">Cache Hit Rate</p>
              <p className="text-3xl font-bold text-white">{metrics.cacheHitRate}%</p>
            </div>
            <div className="bg-indigo-500/20 rounded-lg p-3">
              <Database className="w-6 h-6 text-indigo-400" />
            </div>
          </div>
          <div className="mt-4 flex items-center justify-between">
            <div className="text-sm">
              <span className="text-indigo-400">Excellent</span>
              <span className="text-gray-400 ml-1">performance</span>
            </div>
            <button
              onClick={clearAllCaches}
              className="px-3 py-1 bg-red-500/20 text-red-400 rounded text-xs hover:bg-red-500/30 transition-colors"
            >
              Clear Cache
            </button>
          </div>
        </div>

        {/* Update Success Rate */}
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm font-medium">Update Success</p>
              <p className="text-3xl font-bold text-white">{metrics.updateSuccess}%</p>
            </div>
            <div className="bg-teal-500/20 rounded-lg p-3">
              <TrendingUp className="w-6 h-6 text-teal-400" />
            </div>
          </div>
          <div className="mt-4 flex items-center text-sm">
            <span className="text-teal-400">Reliable</span>
            <span className="text-gray-400 ml-1">deployments</span>
          </div>
        </div>
      </div>

      {/* Cache Status */}
      <div className="bg-gray-800 rounded-lg p-6">
        <h2 className="text-xl font-bold text-white mb-4 flex items-center">
          <Database className="w-5 h-5 mr-2" />
          Cache Status
        </h2>
        
        {Object.keys(cacheStatus).length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {Object.entries(cacheStatus).map(([cacheName, count]) => (
              <div key={cacheName} className="bg-gray-700 rounded-lg p-4">
                <h3 className="font-medium text-white capitalize mb-1">
                  {cacheName.replace(/-/g, ' ')}
                </h3>
                <p className="text-2xl font-bold text-blue-400">{count}</p>
                <p className="text-sm text-gray-400">cached items</p>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8 text-gray-400">
            <AlertTriangle className="w-8 h-8 mx-auto mb-2" />
            <p>No cache data available</p>
          </div>
        )}
      </div>

      {/* Quick Actions */}
      <div className="bg-gray-800 rounded-lg p-6">
        <h2 className="text-xl font-bold text-white mb-4">Quick Actions</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button
            onClick={() => window.location.reload()}
            className="bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg transition-colors flex items-center justify-center space-x-2"
          >
            <TrendingUp className="w-4 h-4" />
            <span>Force Update</span>
          </button>
          
          <button
            onClick={sendTestNotification}
            className="bg-yellow-600 hover:bg-yellow-700 text-white py-3 px-4 rounded-lg transition-colors flex items-center justify-center space-x-2"
          >
            <Bell className="w-4 h-4" />
            <span>Test Notification</span>
          </button>
          
          <button
            onClick={clearAllCaches}
            className="bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-lg transition-colors flex items-center justify-center space-x-2"
          >
            <Database className="w-4 h-4" />
            <span>Clear All Caches</span>
          </button>
        </div>
      </div>
    </div>
  )
}
