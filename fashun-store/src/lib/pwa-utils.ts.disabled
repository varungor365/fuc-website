// PWA utilities for offline functionality and caching
'use client'

// Check if app is running as PWA
export const isPWA = (): boolean => {
  if (typeof window === 'undefined') return false
  
  return (
    window.matchMedia('(display-mode: standalone)').matches ||
    window.matchMedia('(display-mode: fullscreen)').matches ||
    (window.navigator as any).standalone === true
  )
}

// Check if user is online
export const isOnline = (): boolean => {
  if (typeof navigator === 'undefined') return true
  return navigator.onLine
}

// Get installation status
export const getInstallationStatus = (): 'not-supported' | 'installed' | 'available' | 'not-available' => {
  if (typeof window === 'undefined') return 'not-supported'
  
  // Check if already installed
  if (isPWA()) return 'installed'
  
  // Check if installation is supported
  if ('serviceWorker' in navigator && 'PushManager' in window) {
    return 'available'
  }
  
  return 'not-supported'
}

// Cache management utilities
export const cacheUtils = {
  // Cache a product for offline viewing
  async cacheProduct(productId: string): Promise<boolean> {
    if (!('serviceWorker' in navigator)) return false
    
    try {
      const registration = await navigator.serviceWorker.ready
      registration.active?.postMessage({
        type: 'CACHE_PRODUCT',
        payload: { productId }
      })
      return true
    } catch (error) {
      console.error('Failed to cache product:', error)
      return false
    }
  },

  // Get cache status
  async getCacheStatus(): Promise<Record<string, number>> {
    if (!('serviceWorker' in navigator)) return {}
    
    try {
      const registration = await navigator.serviceWorker.ready
      return new Promise((resolve) => {
        const messageChannel = new MessageChannel()
        messageChannel.port1.onmessage = (event) => {
          resolve(event.data)
        }
        
        registration.active?.postMessage(
          { type: 'GET_CACHE_STATUS' },
          [messageChannel.port2]
        )
      })
    } catch (error) {
      console.error('Failed to get cache status:', error)
      return {}
    }
  },

  // Clear all caches
  async clearAllCaches(): Promise<boolean> {
    if (!('serviceWorker' in navigator)) return false
    
    try {
      const registration = await navigator.serviceWorker.ready
      registration.active?.postMessage({
        type: 'CLEAR_CACHE'
      })
      return true
    } catch (error) {
      console.error('Failed to clear caches:', error)
      return false
    }
  },

  // Preload critical pages
  async preloadCriticalPages(): Promise<void> {
    if (!('serviceWorker' in navigator)) return
    
    const criticalPages = [
      '/',
      '/products',
      '/cart',
      '/account/profile',
      '/account/orders'
    ]
    
    try {
      const cache = await caches.open('critical-pages')
      await cache.addAll(criticalPages)
    } catch (error) {
      console.error('Failed to preload critical pages:', error)
    }
  }
}

// Push notification utilities
export const notificationUtils = {
  // Check notification permission status
  getPermissionStatus(): NotificationPermission {
    if (!('Notification' in window)) return 'denied'
    return Notification.permission
  },

  // Request notification permission
  async requestPermission(): Promise<NotificationPermission> {
    if (!('Notification' in window)) return 'denied'
    
    const permission = await Notification.requestPermission()
    return permission
  },

  // Subscribe to push notifications
  async subscribe(): Promise<PushSubscription | null> {
    if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
      return null
    }

    try {
      const registration = await navigator.serviceWorker.ready
      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: urlBase64ToUint8Array(
          process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY || ''
        ) as BufferSource
      })

      // Send subscription to server
      await fetch('/api/notifications/subscribe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(subscription)
      })

      return subscription
    } catch (error) {
      console.error('Failed to subscribe to push notifications:', error)
      return null
    }
  },

  // Unsubscribe from push notifications
  async unsubscribe(): Promise<boolean> {
    if (!('serviceWorker' in navigator)) return false

    try {
      const registration = await navigator.serviceWorker.ready
      const subscription = await registration.pushManager.getSubscription()
      
      if (subscription) {
        await subscription.unsubscribe()
        
        // Notify server
        await fetch('/api/notifications/subscribe', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' }
        })
      }
      
      return true
    } catch (error) {
      console.error('Failed to unsubscribe from push notifications:', error)
      return false
    }
  },

  // Show local notification
  async showNotification(title: string, options: NotificationOptions = {}): Promise<void> {
    if (!('Notification' in window) || Notification.permission !== 'granted') {
      return
    }

    const defaultOptions: NotificationOptions = {
      icon: '/icons/icon-192x192.png',
      badge: '/icons/badge-72x72.png',
      // vibrate: [200, 100, 200], // Not available in TypeScript NotificationOptions
      data: { timestamp: Date.now() },
      ...options
    }

    try {
      const registration = await navigator.serviceWorker.ready
      await registration.showNotification(title, defaultOptions)
    } catch (error) {
      console.error('Failed to show notification:', error)
      // Fallback to browser notification
      new Notification(title, defaultOptions)
    }
  }
}

// Background sync utilities
export const syncUtils = {
  // Register background sync for cart
  async registerCartSync(): Promise<boolean> {
    if (!('serviceWorker' in navigator) || !('sync' in window.ServiceWorkerRegistration.prototype)) {
      return false
    }

    try {
      const registration = await navigator.serviceWorker.ready
      // Check if background sync is supported
      if ('sync' in registration) {
        await (registration as any).sync.register('cart-sync')
      }
      return true
    } catch (error) {
      console.error('Failed to register cart sync:', error)
      return false
    }
  },

  // Register background sync for reviews
  async registerReviewSync(): Promise<boolean> {
    if (!('serviceWorker' in navigator) || !('sync' in window.ServiceWorkerRegistration.prototype)) {
      return false
    }

    try {
      const registration = await navigator.serviceWorker.ready
      // Check if background sync is supported
      if ('sync' in registration) {
        await (registration as any).sync.register('review-sync')
      }
      return true
    } catch (error) {
      console.error('Failed to register review sync:', error)
      return false
    }
  },

  // Register background sync for orders
  async registerOrderSync(): Promise<boolean> {
    if (!('serviceWorker' in navigator) || !('sync' in window.ServiceWorkerRegistration.prototype)) {
      return false
    }

    try {
      const registration = await navigator.serviceWorker.ready
      // Check if background sync is supported
      if ('sync' in registration) {
        await (registration as any).sync.register('order-sync')
      }
      return true
    } catch (error) {
      console.error('Failed to register order sync:', error)
      return false
    }
  }
}

// App update utilities
export const updateUtils = {
  // Check for app updates
  async checkForUpdates(): Promise<boolean> {
    if (!('serviceWorker' in navigator)) return false

    try {
      const registration = await navigator.serviceWorker.ready
      await registration.update()
      return registration.waiting !== null
    } catch (error) {
      console.error('Failed to check for updates:', error)
      return false
    }
  },

  // Skip waiting and activate new service worker
  async skipWaiting(): Promise<void> {
    if (!('serviceWorker' in navigator)) return

    try {
      const registration = await navigator.serviceWorker.ready
      if (registration.waiting) {
        registration.waiting.postMessage({ type: 'SKIP_WAITING' })
      }
    } catch (error) {
      console.error('Failed to skip waiting:', error)
    }
  },

  // Reload app with new version
  reloadApp(): void {
    window.location.reload()
  }
}

// Analytics utilities for PWA
export const pwaAnalytics = {
  // Track PWA installation
  trackInstallation(): void {
    if (typeof gtag !== 'undefined') {
      gtag('event', 'pwa_installed', {
        event_category: 'pwa',
        event_label: 'app_installed'
      })
    }
  },

  // Track offline usage
  trackOfflineUsage(): void {
    if (typeof gtag !== 'undefined') {
      gtag('event', 'offline_usage', {
        event_category: 'pwa',
        event_label: 'used_offline'
      })
    }
  },

  // Track cache hit/miss
  trackCachePerformance(cacheHit: boolean, resource: string): void {
    if (typeof gtag !== 'undefined') {
      gtag('event', 'cache_performance', {
        event_category: 'pwa',
        event_label: cacheHit ? 'cache_hit' : 'cache_miss',
        custom_parameter_1: resource
      })
    }
  }
}

// Helper function to convert VAPID key
function urlBase64ToUint8Array(base64String: string): Uint8Array {
  const padding = '='.repeat((4 - base64String.length % 4) % 4)
  const base64 = (base64String + padding)
    .replace(/-/g, '+')
    .replace(/_/g, '/')

  const rawData = window.atob(base64)
  const outputArray = new Uint8Array(rawData.length)

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i)
  }
  return outputArray
}

// PWA detection hook
export const usePWA = () => {
  const [isInstalled, setIsInstalled] = useState(false)
  const [isOnlineStatus, setIsOnlineStatus] = useState(true)
  const [canInstall, setCanInstall] = useState(false)

  useEffect(() => {
    setIsInstalled(isPWA())
    setIsOnlineStatus(isOnline())
    setCanInstall(getInstallationStatus() === 'available')

    const handleOnline = () => setIsOnlineStatus(true)
    const handleOffline = () => setIsOnlineStatus(false)

    window.addEventListener('online', handleOnline)
    window.addEventListener('offline', handleOffline)

    return () => {
      window.removeEventListener('online', handleOnline)
      window.removeEventListener('offline', handleOffline)
    }
  }, [])

  return {
    isInstalled,
    isOnline: isOnlineStatus,
    canInstall,
    cacheUtils,
    notificationUtils,
    syncUtils,
    updateUtils,
    analytics: pwaAnalytics
  }
}

// React hook imports
import { useState, useEffect } from 'react'

export default {
  isPWA,
  isOnline,
  getInstallationStatus,
  cacheUtils,
  notificationUtils,
  syncUtils,
  updateUtils,
  pwaAnalytics,
  usePWA
}
