name: Staging Deployment

on:
  push:
    branches: [ staging ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  STAGING_URL: ${{ secrets.STAGING_URL }}

jobs:
  pre-deployment:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      deployment-id: ${{ steps.deployment.outputs.deployment-id }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Generate Version
      id: version
      run: echo "version=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
    - name: Generate Deployment ID
      id: deployment
      run: echo "deployment-id=staging-$(date +%s)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
    - name: Run Full Test Suite
      run: npm run test:all
      continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}
      
    - name: Security Audit
      run: npm audit --audit-level moderate
      continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}
      
    - name: Build Application
      run: npm run build
      
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: staging-build-${{ steps.version.outputs.version }}
        path: |
          .next/
          out/
          package.json
          package-lock.json
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deployment
    environment: staging
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: staging-build-${{ needs.pre-deployment.outputs.version }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to AWS ECS
      run: |
        echo "üöÄ Deploying to staging environment..."
        
        # Build and push Docker image
        docker build -t fashun-staging:${{ needs.pre-deployment.outputs.version }} .
        
        # Tag for ECR
        docker tag fashun-staging:${{ needs.pre-deployment.outputs.version }} \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fashun-staging:${{ needs.pre-deployment.outputs.version }}
        
        # Push to ECR
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fashun-staging:${{ needs.pre-deployment.outputs.version }}
        
        # Update ECS service
        aws ecs update-service \
          --cluster fashun-staging \
          --service fashun-staging-service \
          --force-new-deployment
          
        echo "‚úÖ Deployment to staging completed"
        
    - name: Wait for Deployment
      run: |
        echo "‚è≥ Waiting for deployment to stabilize..."
        aws ecs wait services-stable \
          --cluster fashun-staging \
          --services fashun-staging-service
        echo "‚úÖ Deployment stabilized"

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-staging]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Wait for Service Ready
      run: |
        echo "‚è≥ Waiting for staging service to be ready..."
        for i in {1..30}; do
          if curl -f ${{ env.STAGING_URL }}/api/health > /dev/null 2>&1; then
            echo "‚úÖ Service is ready"
            break
          fi
          echo "Attempt $i/30: Service not ready, waiting 10 seconds..."
          sleep 10
        done
        
    - name: Run Smoke Tests
      run: |
        npm run test:smoke -- --baseURL=${{ env.STAGING_URL }}
      env:
        STAGING_URL: ${{ env.STAGING_URL }}
        
    - name: Performance Tests
      run: |
        npm run test:performance -- --baseURL=${{ env.STAGING_URL }}
      env:
        STAGING_URL: ${{ env.STAGING_URL }}

  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests]
    environment: staging
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Run Database Migrations
      run: npm run db:migrate
      env:
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        
    - name: Verify Migration
      run: npm run db:verify
      env:
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-staging, smoke-tests, database-migration]
    if: always()
    
    steps:
    - name: Update Monitoring
      run: |
        echo "üìä Updating monitoring dashboards..."
        
        # Update deployment metrics
        curl -X POST "${{ secrets.MONITORING_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "deployment_id": "${{ needs.pre-deployment.outputs.deployment-id }}",
            "environment": "staging",
            "version": "${{ needs.pre-deployment.outputs.version }}",
            "status": "completed",
            "timestamp": "'$(date -Iseconds)'"
          }'
          
        echo "‚úÖ Monitoring updated"
        
    - name: Clear CDN Cache
      run: |
        echo "üåê Clearing CDN cache..."
        
        # CloudFront cache invalidation
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.STAGING_CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
          
        echo "‚úÖ CDN cache cleared"
        
    - name: Notify Success
      if: ${{ needs.deploy-staging.result == 'success' && needs.smoke-tests.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          üéâ Staging Deployment Successful!
          
          ‚Ä¢ Environment: Staging
          ‚Ä¢ Version: ${{ needs.pre-deployment.outputs.version }}
          ‚Ä¢ Deployment ID: ${{ needs.pre-deployment.outputs.deployment-id }}
          ‚Ä¢ URL: ${{ env.STAGING_URL }}
          
          All smoke tests passed ‚úÖ
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Failure
      if: ${{ needs.deploy-staging.result == 'failure' || needs.smoke-tests.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          ‚ùå Staging Deployment Failed!
          
          ‚Ä¢ Environment: Staging
          ‚Ä¢ Version: ${{ needs.pre-deployment.outputs.version }}
          ‚Ä¢ Deployment ID: ${{ needs.pre-deployment.outputs.deployment-id }}
          
          Please check the logs for details.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}