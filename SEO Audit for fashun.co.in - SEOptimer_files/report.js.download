if (isPdfRequest()) {
    document.body.style.zoom = 0.663;
}

/*
window.setTimeout(function(){
    document.getElementsByClassName('section-title')[0].innerText =
        document.getElementsByTagName('body')[0].getAttribute('style') +
        ' ' +
        document.getElementsByTagName('html')[0].getAttribute('style') +
        ' ' +
        window.devicePixelRatio;
}, 15*1000);
*/

let isMobile; //initiate as false
let csrfToken = $('meta[name="csrf-token"]').attr("content");
let requestsTotal = Object.keys(checkUrls).length * websiteIds.length; // update this variables after adding new check requests

if (window.quick_group !== undefined){
    requestsTotal = 1;
}

let requestsCompleted = 0;
let progressPercentsDone = 5;
let formOptions = '';
let currentProgressAction = lajax.t('Analyzing Website');
const currentProgressActions = [];
const scores = {};
const divideTables = isPdfRequest();

const sections = {
    'seo': lajax.t("On-Page SEO"),
    'rankings': lajax.t("Rankings"),
    'links': lajax.t("Links"),
    'performance': lajax.t("Performance"),
    'ui': lajax.t("Usability"),
    'social': lajax.t("Social"),
};

let targetKeywordRegexp;

const RadarChart = (function () {
    let chart;
    let element;
    let isNew = true;

    // Private methods
    const initChart = function () {
        element = document.getElementById("radar_chart");
        if (!element) {
            return;
        }

        updateChart();

        // Update chart on theme mode change
        KTThemeMode.on("kt.thememode.change", function () {
            // Reinit chart
            updateChart();
        });
    };

    const updateChart = function () {
        if (scores.length === 0) {
            return;
        }

        let sectionName;
        const data=[];

        const sortedScoreSections = Object.keys(scores).sort();

        // { links: {score: 10, max: 12}, localseo: {score: 0, max: 3}, performance: {score: 11, max: 18}, seo: {score: 35, max: 58}, social: {score: 0, max: 10}, ui: {score: 10, max: 17}, website: {score: 66, max: 118} }
        for (let section in sortedScoreSections) {
            section = sortedScoreSections[section];

            if ( !(section in sections) ) {
                continue;
            }
            sectionName = getSectionName(section);

            let value = Math.round(100 * scores[section].score / scores[section].max); // percentage
            value = (value > 100) ? 100 : value; // limit to 100%

            // scaled value formula from update score
            value = Math.max(Math.round(100-((100-value)*1.5)), 0);

            data.push({'name': sectionName, 'value': value, 'label':  scoringType ? value : calculateGrade(value)});
        }

        if (data.length < 3) {
            return;
        }
        let radarColor = '';
        if (typeof hasForegroundColor !== 'undefined' && hasForegroundColor) {
            radarColor = foregroundColor;
        } else {
            radarColor = KTUtil.getCssVariableValue('--bs-primary');
        }

        const labelsColor = KTUtil.getCssVariableValue('--bs-gray-600');

        const options = {
            series: [{
                name: 'Scores',
                data: data.map((x) => x.value),
            }],
            chart: {
                toolbar: {
                    show: false,
                },
                height: 270,
                type: 'radar',
            },
            tooltip: {
                y: {
                    title: {
                        formatter: () => ':',
                    },
                    formatter: function (val) {
                        return scoringType ? val : calculateGrade(val);
                    },
                },
                marker: {
                    show: false,
                },
            },
            yaxis: {
                show: false,
                min: 0,
                max: 100,
                tickAmount: 5,
            },
            xaxis: {
                categories: data.map((x) => x.name),
                labels: {
                    style: {
                        colors: [labelsColor, labelsColor, labelsColor, labelsColor, labelsColor],
                        fontFamily: $('body').css('font-family'),
                    },
                }
            },
            fill: {
                colors: [radarColor],
            },
            stroke: {
                colors: [radarColor],
            },
            markers: {
                colors: [radarColor],
            }
        };
        if (isPdfRequest()) {
            // no-flex pdf renderer fix
            // direct get full container height working incorrectly
            $(".results-radar-container").parent().css('height', $(".results-scores-container .col-lg-2").height() + 40 + 20);
            options.chart.animations = {
                enabled: false
            }
        }
        if (isNew) {
            chart = new ApexCharts(element, options);
            chart.render();
            isNew = false;
        } else {
            chart.updateOptions({
                series: [{
                    name: 'Scores',
                    data: data.map((x) => x.value),
                }],
                xaxis: {
                    categories: data.map((x) => x.name),
                    labels: {
                        style: {
                            colors: [labelsColor, labelsColor, labelsColor, labelsColor, labelsColor],
                        },
                    }
                },
            })
        }
    };

    // Public methods
    return {
        init: function () {
            initChart();
        },
        update: function () {
            updateChart();
        }
    };
})();

const ScoreCharts = (function () {
    const charts = [];

    function drawChart (chartClasses) {
        if (!chartClasses) {
            return;
        }

        const elements = document.querySelectorAll(charts[chartClasses].selector);
        [].slice.call(elements).map(function(element) {
            const value = parseInt(element.getAttribute('data-value') ?? 0);
            const height = parseInt(element.getAttribute('data-height'));
            charts[chartClasses].label = element.getAttribute('data-label') ?? ' ';
            const fontSize = element.getAttribute('data-font-size') ?? "30px";
            const offsetY = Math.round(parseInt(fontSize)/2 - (chartClasses.match(/website(\d+)-score/) !== null ? 1 : 3));
            const size = height > 150 ? '65%' : height>100 ? '60%' : '50%';
            const labelColor = KTUtil.getCssVariableValue('--bs-' + 'gray-700');
            const colors = getColors(element, value);

            let options = {
                series: [value],
                animations: {
                    enabled: true,
                },
                chart: {
                    fontFamily: 'inherit',
                    height: height,
                    sparkline: {
                        enabled: true,
                    },
                    type: 'radialBar',
                },
                grid: {
                    show: false,
                    padding: {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    },
                },
                redrawOnParentResize: true,
                plotOptions: {
                    radialBar: {
                        hollow: {
                            margin: 0,
                            size: size,
                        },
                        dataLabels: {
                            showOn: "always",
                            name: {
                                show: false,
                                fontWeight: '700'
                            },
                            value: {
                                color: labelColor,
                                fontSize: fontSize,
                                fontWeight: '700',
                                offsetY: offsetY,
                                show: true,
                                formatter: function () {
                                    return charts[chartClasses].label !== null ? charts[chartClasses].label : '';
                                }
                            }
                        },
                        track: {
                            background: function({ value, seriesIndex, w }) {
                                return colors[1];
                            },
                            strokeWidth: '100%'
                        }
                    }
                },
                colors: [function({ value, seriesIndex, w }) {
                    return colors[0];
                }],
                // getColors(element, value)[0]],
                stroke: {
                    lineCap: "round",
                },
                labels: [],
            };
            charts[chartClasses].chart = new ApexCharts(element, options);
            charts[chartClasses].chart.render();
        });
    }

    function getColors(element, value) {
        let dialColor = 'danger';
        if (typeof dialColorsBasedOnScoreRanges !== 'undefined') {
            dialColorsBasedOnScoreRanges.forEach(function (colorRange) {
                if (value >= colorRange['range'][0] && value <= colorRange['range'][1]) {
                    dialColor = colorRange['color'];
                }
            });
        }

        const color = element.getAttribute('data-color') ?? (element.getAttribute('data-fgColor') ?? dialColor);
        let baseColor = color;
        let lightColor;
        if (color[0] === '#') {
            const rgb = hexToRgb(color);
            lightColor = 'rgba(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ', 0.3)';
        } else {
            baseColor = KTUtil.getCssVariableValue('--bs-' + color);
            lightColor = KTUtil.getCssVariableValue('--bs-' + color + '-light');
        }

        return [baseColor, lightColor];
    }

    const updateCharts = function (chartClasses) {
            if (charts[chartClasses] && charts[chartClasses].chart) {
                const elements = document.querySelectorAll(chartClasses);
                [].slice.call(elements).map(function(element) {
                    const value = parseInt(element.getAttribute('data-value') ?? 0);
                    const colors = getColors(element, value);
                    charts[chartClasses].label = element.getAttribute('data-label') ?? ' ';
                    charts[chartClasses].chart.opts.colors = [colors[0]];
                    charts[chartClasses].chart.updateOptions({
                        series: [value],
                        plotOptions: {
                            radialBar: {
                                track: {
                                    background: function ({value, seriesIndex, w}) {
                                        return colors[1];
                                    }
                                },
                            },
                        },
                        colors: [function({ value, seriesIndex, w }) {
                            return colors[0];
                        }],
                    });
                });
            }
    }
    const initCharts = function (elements) {
        [].slice.call(elements).map(function(element) {
            const chartClasses = '.' + element.className.replaceAll(' ', '.');
            if (!charts[chartClasses]) {
                charts[chartClasses] = {
                    'selector': chartClasses,
                }
            }
            drawChart(chartClasses);
        });

        // Update charts on theme mode change
        KTThemeMode.on("kt.thememode.change", function () {
            for (const chart  in charts) {
                charts[chart].chart.destroy();
                drawChart(chart);
            }
        });

    };

    // Public methods
    return {
        update: function (chartClasses) {
            updateCharts(chartClasses);
        },
        init: function (selectors) {
            initCharts(selectors);
        },
    };
})();

const MeterGraphs = (function () {
    let graphs = [];
    let labelColor = '#999999';
    let valueColor = '#cccccc';
    let backgroundColor = 'white';
    let successColor = '';
    let middleColor = '#DFFFEA';
    let dangerColor = '#F15642';
    let needleColor = '';

    const updateGraphs = function () {
        if (KTThemeMode) {
            labelColor = KTUtil.getCssVariableValue('--bs-gray-600');
            valueColor = KTUtil.getCssVariableValue('--bs-gray-700');
            backgroundColor = KTUtil.getCssVariableValue('--bs-body-bg');
            needleColor = KTUtil.getCssVariableValue('--bs-gray-800');
        }

        [].slice.call(graphs).map(function(graph) {
            graph.set('colorsStroke', backgroundColor);
            graph.set('textColor', labelColor);
            graph.set('labelsValueColor', valueColor);
            graph.set('needleColor', needleColor);
            graph.grow();
        });
    };

    const addGraphs = function (id, wid, width, labels, value, max, unit, decimal) {
        if (KTThemeMode) {
            labelColor = KTUtil.getCssVariableValue('--bs-gray-600');
            valueColor = KTUtil.getCssVariableValue('--bs-gray-700');
            backgroundColor = KTUtil.getCssVariableValue('--bs-body-bg');
            successColor = KTUtil.getCssVariableValue('--bs-success');
            needleColor = KTUtil.getCssVariableValue('--bs-gray-800');
        }

        const graph = new RGraph.Meter({
            id: id,
            min: 0,
            max: max,
            value: value,
            options: {
                marginBottom: 40,
                anglesStart: RGraph.PI,
                anglesEnd: RGraph.TWOPI,
                segmentsRadiusStart: parseInt(width * 0.228 + (width - 290) * 0.225),
                needleRadius: parseInt(width * 0.25 + (width - 290) * 0.25),
                needleHead: false,
                tickmarksSmallCount: 0,
                tickmarksLargeCount: 0,
                labelsSpecific: labels,
                linewidth: .00001,
                linewidthSegments: 5,
                colorsStroke: backgroundColor,
                backgroundColor: 'transparent',
                colorsRanges: [
                    [labels[0][1], labels[1][1], successColor],
                    [labels[1][1], labels[2][1], middleColor],
                    [labels[2][1], labels[3][1], dangerColor],
                ],
                textSize: wid === websiteId ? 12 : 9,
                textAccessible: false,
                labelsValueBackgroundStroke: 'transparent',
                labelsValueBackgroundFill: 'transparent',
                textColor: labelColor,
                needleColor: needleColor,
                border: false,
            }
        }).grow();

        graphs.push(graph);
        const element = $('#' + id);
        element.parent().css('min-width', width + 'px');
        const valueLabel = element.parent().find('span');
        valueLabel.css('font-size', width / (isPdfRequest() ? 14 : 15) + 'px');
        valueLabel.css('padding-top', (width === 370 ? '46' : width === 330 ? '52' : '39') + 'px');
        valueLabel.text((unit === '%' ? Math.round(100 - value) : value.toFixed(decimal)) + unit);
        if (!element.hasClass('mt-n15')) {
            element.addClass('mt-n8');
        }
    };

    // Public methods
    return {
        update: function () {
            updateGraphs();
        },

        add: function (id, wid, width, labels, value, max, unit, decimal = 1) {
            addGraphs(id, wid, width, labels, value, max, unit, decimal);
        },

        init: function () {
            graphs = [];
            KTThemeMode.on("kt.thememode.change", function () {
                // Reinit graphs
                updateGraphs();
            });
        }
    };
})();

const DonutChart = function () {
    let backgroundColor ='';
    const initChart = function (wid, selector, className, pieData, colors, totalCount, unit) {
        const element = $('#' + selector + ' .' + className);

        if (!element) {
            return;
        }

        let width = (wid === websiteId) ? 280 : 236;

        element.attr('width', width);
        element.attr('height', parseInt(width * 0.737));
        element.attr('id', selector + className);
        $(element.parent()).addClass((wid === websiteId) ? 'me-11 me-sm-15' : 'me-5 me-9');

        $('span:first', element.parent()).html(unit ? mbFormatter(totalCount, unit) : nFormatter(totalCount, 1))
            .css('font-size', wid === websiteId ? '25px' : '20px');
        $('span:last', element.parent()).addClass(wid === websiteId ? 'fs-6 fs-pdf-8' : 'fs-7 fs-pdf-9');
        const legend = $('.js-donut-legend', element.parent().parent());
        $.each(pieData, function( key, item ) {
            legend.append('<div class="d-flex ' + (wid === websiteId ? 'fs-6' : 'fs-7') + ' fs-pdf-7 fw-semibold align-items-center text-start mb-3">\n' +
                '<div class="bullet bg-' + colors[key] + ' me-3"></div>\n' +
                '<div class="text-gray-500">' + item.label + '</div>\n' +
                '<div class="ms-auto fw-bold text-gray-500">' + (unit ? mbFormatter(item.data, unit) : nFormatter(item.data, 1)) + '</div>\n' +
                '</div>');
        });

        if (KTThemeMode) {
            colors = colors.map((x) => x[0] === '#' ? x : KTUtil.getCssVariableValue('--bs-' + x));
            backgroundColor = KTUtil.getCssVariableValue('--bs-body-bg');
        }

        const options = {
            series: pieData.map((x) => x.data),
            chart: {
                fontFamily: 'inherit',
                type: 'donut',
                width: width,
            },
            plotOptions: {
                pie: {
                    expandOnClick: false,
                    donut: {
                        size: (wid === websiteId) ? '75%' : '70%',
                    },
                }
            },
            states: {
                active: {
                    filter: {
                        type: 'none',
                    }
                },
                hover: {
                    filter: {
                        type: 'none',
                    }
                }
            },
            colorsStroke: backgroundColor, //'transparent',
            colors: colors,
            stroke: {
                width: 2,
                color: backgroundColor,
            },
            labels: pieData.map((x) => x.label),
            dataLabels: {
                enabled: false,
            },
            legend: {
                show: false,
            },
            fill: {
                type: 'true',
                color: backgroundColor,
            },
            tooltip: {
                y: {
                    formatter: function(value) {
                        return unit ? mbFormatter(value, unit) : nFormatter(value, 1);
                    }
                }
            },
        };

        const chart = new ApexCharts(document.getElementById(selector + className), options);
        chart.render();
        if (isPdfRequest()){
            //element.attr('style', 'width: 85%!important');
        }
    };

    // Public methods
    return {
        init: function (wid, selector, className, pieData, colors, totalCount, unit = '') {
            initChart(wid, selector, className, pieData, colors, totalCount, unit);
        }
    }
}();


// TODO huge refactoring (remove html code everywhere, use cloning, classes and ids instead)
/**
 * @returns {boolean}
 */
function isMobileRequest() {
    if (isMobile === undefined) {
        isMobile = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) ||
            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4));
    }

    return isMobile;
}

function csrfFunction(parameter) {
    // sha1 (maybe)
    if (typeof SERDFDFVHA === 'undefined'){
        console.warn('csrf function not exixts');
        return '';
    }

    return SERDFDFVHA(parameter);
}

$(function () {
    history.scrollRestoration = "manual";
    if (navigator.userAgent.indexOf("MSIE ") > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
        $('.js-ajax-alert')
            .removeClass('d-none')
            .find('.alert-message')
            .html(lajax.t('Unfortunately SEOptimer reporting no longer supports your legacy browser (Internet Explorer). Please upgrade to a more modern browser such as Chrome, Firefox, Safari or Microsoft Edge.'));
        $('.tab-results, .tab-recommendations, #progress-bar, .progress-bar-container .progress-bar').hide();
    }

    csrfToken = csrfFunction(navigator['us' + 'er' + 'Ag' + 'en' + 't']) || '';

    if (window.requestIdleCallback) {
        requestIdleCallback(function () {
            Fingerprint2.get(function (components) {
                sendAudit(components); // an array of components: {key: ..., value: ...}
            });
        });
    } else {
        setTimeout(function () {
            Fingerprint2.get(function (components) {
                sendAudit(components); // an array of components: {key: ..., value: ...}
            });
        }, 500);
    }

    if (isMobileRequest()) {
        $('body').addClass('wrapper-mobile');
    }

    $('.js-action-click').click(function () {
        const $source = $(this);
        const $target = $($source.attr('data-target'));
        const action = $source.attr('data-action');

        $target[action]();
    });

    const elements = $(".knob")
        .filter(function () {
         return $(this).closest(".hidden").length == 0;
     })
    MeterGraphs.init();
    ScoreCharts.init(elements);
    RadarChart.init();

    $('a.submit').on('click touch', function () {
        $(this).closest('form').submit();
        return false;
    });

    $('body').on('click', 'a.scroll', function () {
        if ($('body').width() < 768) {
            $('.nav>li.main_menu').hide('slow');
        }

        const elementClick = $(this).attr("href");
        let destination = $(elementClick).offset().top;
        let offset = 200 + ($('.topbar-main').length > 0 ? 120 : 0);
        let duration = 1500; // ms
        if ($(this).attr('data-scroll-duration') != undefined){
            duration = $(this).attr('data-scroll-duration');
        }

        if (elementClick === '#settings') {
            $('.tab-settings').removeClass('hidden');
            $('.block').addClass('hidden');
            destination = 0;
        } else if (elementClick === '#userlist') {
            $('.tab-userlist').removeClass('hidden');
            $('.tab-settings').addClass('hidden');
            $('.block').addClass('hidden');
            destination = 0;
        } else if (elementClick === '#competitors') {
            $('.tab-userlist').removeClass('hidden');
            $('.tab-settings').addClass('hidden');
            $('.block').removeClass('hidden');
        } else {
            $('.tab-userlist').addClass('hidden');
            $('.tab-settings').addClass('hidden');
            $('.block').removeClass('hidden');
        }

        if ($(window).width() < 992) {
            $('.navbar-toggle').removeClass('open');
            $('#navigation').hide('slow');
        } else {
            destination -= 100;
        }

        $('body,html').animate({
            scrollTop: destination - offset
        }, duration);
    });

    reInitDetailsButtons();

    const js_main_progress_bar =  $('.js-main-progress-bar')
    $('#options-modal')
        .on('hidden.bs.modal', function (e) {
            const optionsBtn = $('#options-btn');
            setTimeout(function() {
                $(js_main_progress_bar).removeAttr('style');
                $(optionsBtn).blur();
            }, 50);
            setTimeout(function () {
                if ($(optionsBtn).attr('data-kt-menu-attach') !== 'parent') {
                    $(optionsBtn).removeClass('btn-no-active');
                    $(optionsBtn).addClass('btn-light-primary');
                }
            }, 300);
        })
        .on('show.bs.modal', function () {
            setTimeout(function () {
                $(js_main_progress_bar).attr('style', 'padding-right: ' + $('body').css('padding-right'));
            }, 3);
            formOptions = $(this).find('form').serialize();
        });

    $('#share-button').on('click', function (e) {
        const self = $(this);
        setTimeout(function () {
            if ($(self).attr('aria-expanded') === 'false') {
                $(self).blur();
            }
        }, 50);
    })

    if (!isMobileRequest()) {
        $('#options-btn').on('mousedown click', function (e) {
            if ($(this).attr('data-kt-menu-attach') === 'parent') {
                e.preventDefault();
                e.stopImmediatePropagation();
            }
        });
    } else {
        $('#options-btn').on('touch click', function (e) {
            const self = $(this);
            setTimeout(function () {
                if ($(self).attr('data-kt-menu-attach') !== 'parent') {
                    $(self).addClass('btn-active');
                    $(self).removeClass('btn-light-primary');
                }
            }, 1);
            setTimeout(function () {
                if ($(self).attr('data-kt-menu-attach') !== 'parent') {
                    $(self).addClass('btn-no-active');
                    $(self).removeClass('btn-active');
                }
            }, 501);
        });
    }

    $('#options-save').on('click', function () {
        // validate keyword for wrong chars \/?
        const form = $('#options-modal')
        if (formOptions === form.find('form').serialize()) {
            form.modal('hide');
            return;
        }

        const optionsTarget = $('#options-target');
        const targetKeyword = optionsTarget.val();
        const targetWebsite = $('#options-domain').val();
        const optionsCompetitor1 = $('#options-competitor1');
        const optionsCompetitor2 = $('#options-competitor2');

        clearErrorsInline([optionsTarget, optionsCompetitor1, optionsCompetitor2])
        if (targetKeyword.match(/[\/?#<>"]/) !== null) {
            optionsTarget.attr('style', 'border-color:red');
            showErrorInline(optionsTarget, lajax.t('Special characters are not allowed: ') + '/?#<>"');
            return false;
        }
        // validate website on unique
        const targetCompetitor1 = optionsCompetitor1.val().toLowerCase().replace(/https?:\/\//, '');
        if ((targetCompetitor1 !== '') && (targetCompetitor1 === targetWebsite || !isValidURL(targetCompetitor1))) {
            showErrorInline(optionsCompetitor1, targetCompetitor1 === targetWebsite ? lajax.t('You have entered the same website URL multiple times. Please use unique website URLs.') : checkDomainMessage);
            return false;
        }

        const targetCompetitor2 = optionsCompetitor2.val().toLowerCase().replace(/https?:\/\//, '');
        if ((targetCompetitor2 !== '') && (targetCompetitor2 === targetWebsite || targetCompetitor2 === targetCompetitor1 || !isValidURL(targetCompetitor2))) {
            showErrorInline(optionsCompetitor2, targetCompetitor2 === targetWebsite || targetCompetitor2 === targetCompetitor1 ? lajax.t('You have entered the same website URL multiple times. Please use unique website URLs.') : checkDomainMessage);
            return false;
        }

        // filter competitors
        optionsCompetitor1.val(cleanWebsiteURL(optionsCompetitor1.val()));
        optionsCompetitor2.val(cleanWebsiteURL(optionsCompetitor2.val()));

        form.modal('hide');
        $('body').prepend('<div class="page-loader bg-dark flex-column bg-opacity-25 d-flex"><span class="spinner-border text-primary position-absolute start-50 top-50 ms-n8 mt-n8 h-40px w-40px" role="status"></span></div>');
        const optionsTemplate = $('#options-template');
        window.location = generateReportUrl({
            'host': $('#options-host-domain').val(),
            'language': $('#options-language').val(),
            'subdomain': $('#options-sub-domain').val(),
            'auditdomain': $('#options-audit-domain').val(),
            'website': targetWebsite,
            'template': optionsTemplate.val(),
            'target': optionsTarget.val(),
            'competitor1': optionsCompetitor1.val(),
            'competitor2': optionsCompetitor2.val()
        });
        optionsTemplate.val(template);
    });

    // trigger save button on all modals when ENTER key pressed if input is in focus
    $('.modal input, .modal select').on('keypress', function (e) {
        if (e.which === 13) {
            $(e.target).closest('.modal').find('.btn-submit').trigger('click');
        }
        return true;
    });

    if (targetKeyword !== '') {
        targetKeywordRegexp = new RegExp('(' + escapeRegExp(targetKeyword) + ')', 'gi');
    }

    // report requests
    // start only on report page
    // {0: 'F', 19: 'D-', 25: 'D', 31: 'D+', 37: 'C-', 43: 'C', 49: 'C+', 55: 'B-', 61: 'B', 67: 'B+', 73: 'A-', 79: 'A', 85: 'A+'}
    if (typeof scoreGrades === 'undefined') {
        return;
    }

    let currentWid;
    const progressInterval = setInterval(function () {
        progressPercentsDone++;
        $('.js-main-progress-bar .progress-bar').css('width', progressPercentsDone + '%');
        $('.progress-fill').html(currentProgressAction + " - " + progressPercentsDone + lajax.t("% Complete"));
        if (progressPercentsDone >= 99) {
            clearInterval(progressInterval);
        }
    }, 500);

    // generate field containers for all checks
    $('.faq-box').each(function () {
        const websiteColors = ['primary', 'cyan', 'info'];
        const temp = $(this).attr('class').match(/field-(\w+)/);
        for (let ind = websiteIds.length; ind > 0; ind--) {
            currentWid = websiteIds[ind - 1];
            $(this).after( $(this).clone().attr('id', temp[1] + currentWid) );
            if (websiteIds.length > 1) {
                $('#' + temp[1] + currentWid).find('h5').after('<div class="d-flex overflow-ellipsis"><h5 class="question website-circle mt-1 website' + ind
                    + ' fs-6 badge badge-light-' + websiteColors[ind - 1]
                    + '"><i class="ki-duotone ki-abstract-39 fs-base text-' + websiteColors[ind - 1]
                    + ' me-2"><span class="path1"></span><span class="path2"></span></i>'
                    + websiteNames[currentWid] + '</h5></div>');
            }
            if (currentWid !== websiteId) {
                $('#' + temp[1] + currentWid).addClass('competitor');
                $('#' + temp[1] + currentWid).find('h5').first().remove();
                if (temp[1] === 'subpages') {
                    $('#' + temp[1] + currentWid).remove();
                }
            }
        }

        // check-info
        if (currentWid === websiteId) {
            $('#' + temp[1] + currentWid).append('<div class="check-info" style="display: none"></div>');
        }
    });

    // click on check of <div class="wrapper report-wrapper explainer">
    $('.explainer .faq-box').click(function (e){
        if ($(this).hasClass('expandable')) {
            $(this).find('.check-info').slideToggle();
        }
    });

    $('.check-group .faq-box').click(function (e) {
        if ($(this).hasClass('field-subpages')){
            return;
        }
        // force remove :target pseudoclass from check container on click
        // broke browser behavior 09/2024
        removeHashFromCurrentUrl(window.location.pathname + window.location.search);
    });

    for (let ind = 0; ind < websiteIds.length; ind++) {
        currentWid = websiteIds[ind];
        if (window.quick_group === undefined) {
            getChecksResult(currentWid, 'html', function (results, currentWid) {
                //snippet
                generateSnippet(results.googleSearchPreview, $('#googleSearchPreview' + currentWid + ' .field-value'));
                //canonicalTag
                $('#canonicalCheck' + currentWid + ' .field-value-table').append(generateCanonicalList(results.canonicalCheck));
                // hasHreflang
                $('#hasHreflang' + currentWid + ' .field-details').append(generateHreflangTable(results.hasHreflang));
                //hasH1
                $('#hasH1Header' + currentWid + ' .field-details').append(generateH1HeadersTable(results.hasH1Header));
                // hasHeaders
                $('#hasHeaders' + currentWid + ' .field-value-table').append(generateHeadersStatsTable(results.hasHeaders));
                $('#hasHeaders' + currentWid + ' .field-details').append(generateHeadersTable(results.hasHeaders));
                // hasImageWithoutAlt
                $('#hasImageWithoutAlt' + currentWid + ' .field-details').append(generateImageList(results.hasImageWithoutAlt));
                // hasFriendlyUrl
                $('#hasFriendlyUrl' + currentWid + ' .field-details').append(generateNonFriendlyUrlTable(results.hasFriendlyUrl));
                // hasAnalytics
                $('#hasAnalytics' + currentWid + ' .field-value-table').append(generateAnalyticsList(results.hasAnalytics));
                // onPageLinks
                $('#onPageLinks' + currentWid + ' .field-details').append(generateOnPageLinks(results.onPageLinks, currentWid));
                $('#hasAmp' + currentWid + ' .field-details').append(generateAmpTagsInfo(results.hasAmp));
                $('#hasFlash' + currentWid + ' .field-details').append(generateFlashList(results.hasFlash));
                // subpages
                generateSubpagesTable(results.subpages, $('#subpages' + currentWid));
                // target keyword
                $('#targetH1' + currentWid + ' .field-details').append(generateH1HeadersTable(results.targetH1, true));
                // targetAlt
                $('#targetAlt' + currentWid + ' .field-details').append(generateTargetImageList(results.targetAlt));
                highlightTarget();

                if (popover) {
                    $('.field-subpages a').on('click', function () {
                        const subpagesPopover = $('.js-subpages-popover');
                        if ($(subpagesPopover).css('display') !== 'none') {
                            $(subpagesPopover).hide();
                            return false;
                        }
                        let left = $(this).offset().left;
                        if (left < 0) {
                            left = 0;
                        }

                        $(subpagesPopover)
                            .css({
                                'left': left,
                                'top': $(this).offset().top + $(this).outerHeight() + 10,
                            })
                            .show();
                        return false;
                    });
                }
                $('#hasOpenGraphTags' + currentWid + ' .field-details').append(generateTagsTable(results.hasOpenGraphTags));
                $('#hasTwitterTags' + currentWid + ' .field-details').append(generateTagsTable(results.hasTwitterTags));
                reInitDetailsButtons();

                // other HTML related checks after html downloaded
                getChecksResult(currentWid, 'social', function (results, currentWid) {
                    // youtubeActivity
                    $('#youtubeActivity' + currentWid + ' .field-value').append(generateYoutubeActivity(results.youtubeActivity));
                });

                getChecksResult(currentWid, 'files', function (results, currentWid) {
                    // hasSitemap
                    $('#hasSitemap' + currentWid + ' .field-value-table').append(generateSitemapList(results.hasSitemap, currentWid));
                    // hasRobotsTxt
                    $('#hasRobotsTxt' + currentWid + ' .field-value-table').append(generateRobotsTxtList(results.hasRobotsTxt, currentWid));
                });

                getChecksResult(currentWid, 'localseo', function (results, currentWid) {
                    let data = results.googleMapsProfileExists.data;
                    let html;

                    if (typeof (data) === 'object' && typeof (data.title) === 'string' && data.title !== '') {
                        html = generateGoogleProfileTable(data);
                        $('#googleMapsProfileExists' + currentWid + ' .field-value-table').html(html).show();
                    }

                    data = results.googleMapsWebsiteData.data;
                    if (typeof (data) === 'object' && typeof (data.phone) === 'string' && (data.phone !== '' || data.address !== '')) {
                        html = googleMapsDataOnWebsiteTable(data);
                        $('#googleMapsWebsiteData' + currentWid + ' .field-value-table').html(html).show();
                    }

                    data = results.googleMapsProfileCompleteness.data;
                    if ((typeof (data) === 'object') && typeof (data.url) === 'string' && (data.url !== '' || data.address !== '' || data.phone !== '')) {
                        html = googleMapsProfileCompletenessTable(data);
                        $('#googleMapsProfileCompleteness' + currentWid + ' .field-value-table').html(html).show();
                    }

                    data = results.googleMapsReviews.data;
                    // Number class not supported in wkhtmltopdf
                    if ((typeof (data) === 'object') && data.reviews) {
                        html = googleMapsProfileRating(data);
                        $('#googleMapsReviews' + currentWid + ' .field-value-table').html(html).show();
                    }

                    data = results.localBusinessSchema.data;
                    if ((typeof (data) === 'object') && (data.schema.length > 0)) {
                        html = localBusinessSchemaTypeData(data);
                        $('#localBusinessSchema' + currentWid + ' .field-value-table').html(html).show();
                    }
                    reInitDetailsButtons();
                });
            });

            getChecksResult(currentWid, 'insights', function (results, currentWid) {
                // hasOptimizedImages
                $('#hasOptimizedImages' + currentWid + ' .field-details').append(generateOptimisedImages(results.hasOptimizedImages));
                // hasTapTargetSizing
                $('#hasTapTargetSizing' + currentWid + ' .field-details').append(generateTapTargetSizing(results.hasTapTargetSizing));
                // hasLegibleFontsizes
                $('#hasLegibleFontsizes' + currentWid + ' .field-details').append(generateLegibleFontsizes(results.hasLegibleFontsizes));
                // hasMinified
                $('#hasMinified' + currentWid + ' .field-details').append(generateNonMinifiedList(results.hasMinified));
                // PageSpeed Insights - Mobile
                $('#mobilePageInsights' + currentWid + ' .field-details').append(generateInsightsTable(results.mobilePageInsights, 'mobile', currentWid));
                // PageSpeed Insights - Desktop
                $('#desktopPageInsights' + currentWid + ' .field-details').append(generateInsightsTable(results.desktopPageInsights, 'desktop', currentWid));

                reInitDetailsButtons();
            }, function (checkName, checkValue, currentWid) {
                if (checkName === 'coreWebVitals') {
                    generateCoreWebVitalsCharts(currentWid, checkValue, '#coreWebVitals' + currentWid);
                }
            });

            getChecksResult(currentWid, 'metrics', function (results, currentWid) {
                // screenshot
                if (currentWid === websiteId) {
                    if (results.screenshot !== false) {
                        // pdf fix
                        $('.main-screenshot-container .card-box-thumb-desktop').find('a')
                            .attr('href', results.screenshot.value)
                            .css('pointer-events', 'auto')
                            .find('img').attr('src', results.screenshot.value).css('opacity', 1);
                        refreshFsLightbox();

                        const img = new Image();
                        img.src = results.screenshot.value;

                        img.onload = () => {
                            $('.main-screenshot-container .card-box-thumb-desktop').removeClass('opacity-0').find('a')
                                .attr('href', results.screenshot.value)
                                .css('pointer-events', 'auto')
                                .find('img').attr('src', results.screenshot.value).css('opacity', 1);
                            const mobile_screenshot = results.screenshot.value.replace('-desktop.jpg','-mobile.jpg');
                            const mobile_img = new Image();
                            mobile_img.src = mobile_screenshot;
                            mobile_img.onload = () => {
                                $('.main-screenshot-container .card-box-thumb-mobile').removeClass('opacity-0').find('a')
                                    .attr('href', mobile_screenshot)
                                    .css('pointer-events', 'auto')
                                    .find('img').attr('src', mobile_screenshot).css('opacity', 1);
                                refreshFsLightbox();
                            }
                            mobile_img.onerror = () => {
                                $('.main-screenshot-container .card-box-thumb-mobile').remove();
                                refreshFsLightbox();
                            };
                        };
                        img.onerror = () => {
                            $('.main-screenshot-container .card-box-thumb-desktop').find('a').removeAttr('data-fslightbox');
                            $('.main-screenshot-container .card-box-thumb-mobile').remove();
                            refreshFsLightbox();
                        };
                    } else {
                        $('.main-screenshot-container').hide();
                        $('.dashboard-main.col-md-6').removeClass('col-md-6');
                    }
                }

                // deviceRendering
                $('#deviceRendering' + currentWid + ' .rendering-images').append(generateRenderingImages(currentWid, results.deviceRendering));

                $('#numberOfResources' + currentWid + ' .field-value').append(generateResourceList(results.numberOfResources, currentWid)); // numberOfResources
                $('#javascriptErrors' + currentWid + ' .field-details').append(generateJavascriptErrorsList(results.javascriptErrors));// javascriptErrors

                //technologies
                $('#technologies' + currentWid + ' .field-details').append(generateTechnologiesList(currentWid, results.technologies));

                // keywords
                $('#keywords' + currentWid + ' .field-value-tables').append(generateKeywordsAndPhrasesTable(currentWid, results.keywords));

                // hasDeprecated
                $('#hasDeprecated' + currentWid + ' .field-details').append(generateDeprecatedTagsTable(results.hasDeprecated));
                // hasInlineCss
                $('#hasInlineCss' + currentWid + ' .field-details').append(generateInlineCssTable(results.hasInlineCss));
                // hasEmail
                $('#hasEmail' + currentWid + ' .field-details').append(generateEmailTable(results.hasEmail));
                // hasFacebookPixel
                $('#hasFacebookPixel' + currentWid + ' .field-value').append(generateFacebookPixels(results.hasFacebookPixel));

                reInitDetailsButtons();
            }, function (checkName, checkValue, currentWid) {
                if (checkName === 'serverResponseTime') {
                    $('#serverResponseTime' + currentWid + ' .charts').html(generateSpeedChartsContainer(currentWid, checkValue));
                    generateSpeedCharts(currentWid, checkValue);
                }

                if (checkName === 'pageSize') {
                    $('#pageSize' + currentWid + ' .charts').html(generateSizeChartsContainer(currentWid, checkValue));
                    generateSizeCharts(currentWid, checkValue);
                }

                if (checkName === 'hasGzip') {
                    $('#hasGzip' + currentWid + ' .charts').html(generateTransferSizeChartsContainer(currentWid, checkValue));
                    generateTransferSizeCharts(currentWid, checkValue);
                }

            });

            getChecksResult(currentWid, 'server', function (results, currentWid) {

            });

            getChecksResult(currentWid, 'rankings', function (results, currentWid) {
                $('#topKeywordRankings' + currentWid + ' .field-value-table').append(generateTopKeywordRankingsTable(results.topKeywordRankings));
                $('#totalTrafficFromSearch' + currentWid + ' .field-value').append(generateTotalTrafficStats(results.totalTrafficFromSearch));
                $('#keywordPositions' + currentWid + ' .positions-table').append(generateKeywordPositionsTable(results.keywordPositions));

                // Rankings JS dirty hack for PDF (for page-breaking)
                //if (currentWid === websiteId && isPdfRequest()) {
                //    $('#rankings .js-header-place:visible:first').html($('#rankings .portlet-heading')[0].outerHTML);
                //    $('#rankings .portlet-heading:first').hide();
                //    $('#rankings .js-header-place:visible:first').addClass('pdf-header-hack');
                //}
            });
        }

        if (window.quick_group === undefined || quick_group === 'backlinks') {
            getChecksResult(currentWid, 'backlinks', function (results, currentWid) {
                if (results !== undefined) {
                    $('#backlinks' + currentWid + ' .field-details').append(generateBacklinksStats(currentWid, results.backlinks));
                    generateBacklinkSummary(currentWid, results.backlinks);
                    $('#backlinksList' + currentWid + ' .field-details').append(generateBacklinksList(currentWid, results.backlinksList));
                    $('#backlinksTopPages' + currentWid + ' .field-details').append(generateBacklinksTopPages(currentWid, results.backlinksTopPages));
                    $('#backlinksTopAnchors' + currentWid + ' .field-details').append(generateBacklinksTopAnchors(currentWid, results.backlinksTopAnchors));

                    $('.disable-external-action').on('click', function (e) {
                        e.stopPropagation();
                    });

                    if (results.backlinksTopGeographies !== undefined) {
                        generateBacklinksTopGeographiesCharts(currentWid, results.backlinksTopGeographies);
                    }
                }
            });
        }
    }
});

function localBusinessSchemaTypeData(data) {
    let table = '<div class="row mt-4"><div class="gm-profile-info col-xl-6">',
        schema = data.schema;
    table += '<table class="table table-row-dashed table-fluid table-wrapped mb-0">';

    for (const s in schema) {
        if (typeof(schema[s]) === 'string') {
            table += '<tr><td>'+schema[s]+'</td></tr>';
        }
    }

    table += '</table></div></div>';
    return table;
}

function googleMapsProfileRating(data) {
    let rValue = Math.floor(data.rating),
        partVl = parseInt((parseFloat(data.rating) > rValue ? parseFloat(data.rating) - rValue : rValue - parseFloat(data.rating)) * 100),
        ratingIcons = '<div class="rating">';

    let active = ' is-active';
    for (let r = 1; r < 6; r++) {
        let half = '';
        if (r > rValue) {
            if (active !== '') {
                if ((partVl > 0) && (partVl < 50)) {
                    half = ' half-star-40 half-star';
                } else if (partVl == 50) {
                    half = ' half-star-55 half-star';
                } else if (partVl > 50) {
                    half = ' half-star-70 half-star';
                }
            }
            active = '';
        }

        ratingIcons += '<span class="rating-label' + active + half + '" data-char="★">★</span>';
    }

    ratingIcons += '</div>';

    let html = '<ul class="rating-line"><li>' + data.rating + '</li>';
    html += '<li>'+ratingIcons+'</li>';
    html += '<li>'+data.reviews+'&nbsp;' + lajax.t('reviews') + '</li><div class="clearfix"></div></ul>';
    html += '<div class="row rating-table"><div class="col-lg-6 col-md-6 col-sm-12">';
    html += '<table class="table table-row-dashed table-fluid table-wrapped mb-0">';
    html += '<thead><tr><th>'+lajax.t(data.rating_label)+'</th><th></th></tr></thead>';

    let maxValue = 0,
        content = '';

    if ((typeof(data.rating_details) === 'object') && data.rating_details) {
        $.each(data.rating_details, function(key, value) {
            if (value > maxValue) {
                maxValue = value;
            }
        });

        Object.keys(data.rating_details).sort(function(a, b) {
            return b - a;
        }).reduce(function(obj, key) {
            const width = (maxValue !== 0) ? (data.rating_details[key] / maxValue * 100) : 0;
            content += '<tr><td>' + key + '</td><td class="volume-bar-wrapper min-w-100px"><div><span style="width:' + width + '%;"></span></div></td></tr>';
        }, {});
    }
    
    html += content.length ? content : '<tr class="odd"><td valign="top" colspan="6" class="text-center">' + lajax.t('No data available in table') + '</td></tr>';

    html += '</table></div>';
    
    return html;
}

function googleMapsDataOnWebsiteTable(data) {
    let table = '<div class="row mt-4"><div class="gm-profile-info col-xl-6">',
        fields = {
            phone: lajax.t('Phone'),
            address: lajax.t('Address'),
        };
    table += '<table class="table table-row-dashed table-fluid table-wrapped mb-0">';
    for (const f in fields) {
        if ((typeof(data[f]) === 'string') && data[f] != '') {
            table += '<tr><td>'+fields[f]+'</td><td>'+data[f]+'</td>';
        }
    }
    table += '</table></div></div>';
    
    return table;
}

function googleMapsProfileCompletenessTable(data) {
    let table = '<div class="row mt-4"><div class="gm-profile-info col-xl-6">',
        fields = data.fields;

    table += '<table class="table table-row-dashed table-fluid table-wrapped mb-0">';
    for (const fieldName in fields) {
        if ((typeof(data[fieldName]) === 'string') && data[fieldName] != '') {
            table += '<tr><td>'+fields[fieldName]+'</td><td>'+data[fieldName]+'</td>';
        }
    }
    table += '</table></div></div>';
    
    return table;
}

function generateGoogleProfileTable(data) {
    let table = '<div class="row mt-4"><div class="col-xl-6">';
    table += '<table class="table table-row-dashed table-fluid table-wrapped mb-0">';
    table += '<tr><td class="pe-0 w-35px"><img src="/img/icons/google-profile.png" width="24px" height="24px" /></td><td>' + data.title + '</td></tr></table></div></div>';
        
    return table;    
}

function generateSpeedChartsContainer(wid, check) {
    const html = '<div class="row ' + (wid === websiteId  ? '' : 'competitor-charts-container') + '">\n' +
        '                                            <div class="col-12 col-md-6 col-xl-4">\n' +
        '                                                <div class="avoid-break-inside text-center d-flex flex-wrap flex-center">\n' +
        '                                                    <div class="fs-2 ' + (wid === websiteId ? 'fs-pdf-4' : 'fs-pdf-6') + ' my-5 text-center w-100">' + lajax.t('Server Response') + '</div>\n' +
        '                                                    <div class="position-relative canvas-label">\n' +
        '                                                        <div class="position-absolute translate-middle start-50 top-50 d-flex flex-column flex-center">\n' +
        '                                                             <span class="fw-bolder text-gray-700"></span>\n' +
        '                                                        </div>' +
        '                                                        <canvas class="speed-first-byte" width="100" height="184"></canvas>\n' +
        '                                                    </div>' +
        '                                                </div>\n' +
        '                                            </div>\n' +
        '                                            <div class="col-12 col-md-6 col-xl-4">\n' +
        '                                                <div class="avoid-break-inside text-center d-flex flex-wrap flex-center">\n' +
        '                                                    <div class="fs-2 ' + (wid === websiteId ? 'fs-pdf-4' : 'fs-pdf-6') + ' my-5 text-center w-100">' + lajax.t('All Page Content Loaded') + '</div>\n' +
        '                                                    <div class="position-relative canvas-label">\n' +
        '                                                        <div class="position-absolute translate-middle start-50 top-50 d-flex flex-column flex-center">\n' +
        '                                                             <span class="fw-bolder text-gray-700"></span>\n' +
        '                                                        </div>' +
        '                                                        <canvas class="speed-on-load" width="100" height="184"></canvas>\n' +
        '                                                    </div>' +
        '                                                </div>\n' +
        '                                            </div>\n' +
        '                                            <div class="col-12 col-md-6 col-xl-4">\n' +
        '                                                <div class="avoid-break-inside text-center d-flex flex-wrap flex-center">\n' +
        '                                                    <div class="fs-2 ' + (wid === websiteId ? 'fs-pdf-4' : 'fs-pdf-6') + ' my-5 text-center w-100">' + lajax.t('All Page Scripts Complete') + '</div>\n' +
        '                                                    <div class="position-relative canvas-label">\n' +
        '                                                        <div class="position-absolute translate-middle start-50 top-50 d-flex flex-column flex-center">\n' +
        '                                                             <span class="fw-bolder text-gray-700"></span>\n' +
        '                                                        </div>' +
        '                                                        <canvas class="speed-last-byte" width="100" height="184"></canvas>\n' +
        '                                                    </div>' +
        '                                                </div>\n' +
        '                                            </div>\n' +
        '                                        </div>';

    return wrapInButton(html, wid);
}

function generateSizeChartsContainer(wid, check) {
    const h1 = lajax.t('Download Page Size');
    const h2 = lajax.t('Download Page Size Breakdown');
    const html = '<div class="row mb-4 avoid-break-inside ' + (wid === websiteId  ? '' : 'competitor-charts-container') + '">\n' +
        '                                            <div class="col-12 col-xl-6">\n' +
        '                                                <div class="avoid-break-inside text-center d-flex flex-wrap flex-center">\n' +
        '                                                    <div class="fs-2 ' + (wid === websiteId ? 'fs-pdf-4' : 'fs-pdf-6') + ' my-5 text-center w-100">' + h1 + '</div>\n' +
        '                                                    <div class="position-relative  canvas-label">\n' +
        '                                                        <div class="position-absolute translate-middle start-50 top-50 d-flex flex-column flex-center">\n' +
        '                                                             <span class="fw-bolder text-gray-700"></span>\n' +
        '                                                        </div>' +
        '                                                    <canvas class="total-page-size' + (wid === websiteId ? ' mt-n15': '') + '" width="100" height="281"></canvas>\n' +
        '                                                    </div>' +
        '                                                </div>\n' +
        '                                            </div>\n' +
        '                                            <div class="col-12 col-xl-6 mt-5 mt-xl-0">\n' +
        '                                                <div class="avoid-break-inside text-center">\n' +
        '                                                    <div class="fs-2 ' + (wid === websiteId ? 'fs-pdf-4' : 'fs-pdf-6') + ' my-5 pb-6 pb-sm-3 text-center">' + h2 + '</div>\n' +
        '                                                    <div class="d-flex flex-wrap flex-sm-nowrap justify-content-center">\n' +
        '                                                        <div class="position-relative d-flex flex-center h-175px w-175px ms-11 mb-4 ms-sm-0">\n' +
        '                                                            <div class="position-absolute translate-middle start-50 top-50 d-flex flex-column flex-center">\n' +
        '                                                                 <span class="fw-bolder text-gray-700">&nbsp;</span>\n' +
        '                                                                 <span class="fs-6 fs-pdf-7 fw-semibold text-gray-500">' + lajax.t('Total') + '</span>\n' +
        '                                                            </div>\n' +
        '                                                            <div class="page-size-breakdown pointer-event" width="100" height="386"></div>\n' +
        '                                                        </div>\n' +
        '                                                        <div class="js-donut-legend d-flex flex-column justify-content-center flex-row-fluid pe-0 pe-sm-11 mb-5 min-w-200px mw-200px min-w-xl-250px mw-xl-250px">\n' +
        '                                                     </div>\n'+
        '                                                </div>\n' +
        '                                            </div>\n' +
        '                                        </div>';

    return wrapInButton(html, wid);
}

function generateRenderingImages(wid, check) {
    if (check == false) {
        return;
    }

    let html = '<div class="d-flex col-12 mb-4 flex-wrap flex-md-nowrap ' + (wid === websiteId ? 'justify-content-center justify-content-md-start">' : 'justify-content-start">') +
        '<div class="col-screenshot-mobile d-flex">\n' +
        '                    <div class="screenshot mobile" style="-webkit-user-select: none;">\n' +
        '                        <div class="screenshot-img-container" style="';
    if (check !== false) {
        html += 'background-image:url(' + check.data.mobile + ')!important;';
    }
    html += '">\n';
    html +=  '                        </div>\n' +
        '                    </div>\n' +
        '                </div>\n' +
        '                <div class="col-screenshot-tablet d-flex">\n' +
        '                    <div class="screenshot tablet" style="-webkit-user-select: none;">\n' +
        '                        <div class="screenshot-img-container" style="';
    if (check !== false) {
        html += 'background-image:url(' + check.data.tablet + ')!important;';
    }
    html += '">\n';
    html += '\n' +
        '                        </div>\n' +
        '                    </div>\n' +
        '                </div>\n' +
        '            </div>\n';

    // Preload images
    const img1 = new Image();
    img1.src = check.data.mobile;
    const img2 = new Image();
    img2.src = check.data.tablet;
    
    return wrapInButton(html, wid);
}

function generateHeadersStatsTable(check) {
    if (check === false) {
        return '';
    }

    let html = '\
        <div class="row mt-4">\
        <div class="table-responsive col-md-6">\
        <table class="table table-row-dashed table-fluid avoid-break-inside mb-0">\
            <thead>\
                <tr>\
                    <th>' + lajax.t('Header Tag') + '</th><th>' + lajax.t('Frequency') + '</th><th></th>\
                </tr>\
            </thead>\
            <tbody>';

    const headings = [];
    let heading_max = 0;
    let length = 0;
    for (let i = 2; i < 7; i++) {
        length = 0;
        if (check.data['h' + i] !== undefined) {
            length = check.data['h' + i]['length'];
        }
        headings.push([
            'H' + i,
            length
        ]);

        if (heading_max < length) {
            heading_max = length;
        }
    }

    for (const heading in headings) {
        html += '<tr><td>%header1%</td><td>%header2%</td><td width="45%" class="volume-bar-wrapper min-w-100px"><div><span style="%style%"></span></div></td></tr>'.strtr({
            "%header1%": headings[heading][0],
            "%header2%": headings[heading][1],
            "%style%": 'width: ' + (Math.round((headings[heading][1] * 100) / heading_max) || 0) + '%'
        });
    }

    html += '</tbody></table></div></div>';

    return html;
}

function generateHeadersTableHtml(list, highlightTarget) {
    let html = '';
    const width = isPdfRequest() ? 20: 10;

    if (highlightTarget === undefined) {
        highlightTarget = false;    // wkhtmltopdf doesn't support default params in function header
    }

    html += '<div class="row"><div class="col-11"><div class="table-part">\
        <table class="table table-row-dashed table-fluid w-100 w-md-50">\
            <thead>\
                <tr>\
                    <th style="width:' + width + '%">' + lajax.t("Tag") + '</th><th>' + lajax.t('Value') + '</th>\
                </tr>\
            </thead>\
            <tbody>';

    let i = 0;

    for (const heading in list) {
        const headings = list[heading];
        if (headings.length > 0) {
            for (const j in headings) {
                // skip tags without target keyword
                if (highlightTarget
                    && (targetKeyword === '' || headings[j].match(targetKeywordRegexp) === null)) {
                    continue;
                }

                //This is to regroup a long table in a set of small tables so that they break in pages better in PDF
                if (divideTables && (i % 6 == 0) && (i > 0)) {
                    html += '</tbody></table></div><div class="table-part"><table class="table table-row-dashed table-fluid w-100 w-md-50"><tbody>';
                }

                i++;

                html += '<tr><td style="width:' + width + '%">%headingId%</td><td>%headingValue%</td></tr>'.strtr({
                    '%headingId%': heading.toUpperCase(),
                    '%headingValue%': highlightTarget ? '<span class="highlight-target">' + headings[j] + '</span>' : headings[j]
                });
            }
        }
    }

    html += '</tbody></table></div></div></div>';

    return wrapInButton(html);
}

function generateHreflangTableHtml(list, highlightTarget) {
    let html = '';
    const width = 30;
    let tableWidth = 50;

    if (highlightTarget === undefined) {
        highlightTarget = false;
    }
    if (isMobileRequest()) {
        tableWidth = 100;
    }

    if (list[1] != undefined) {
        if (list[1].length !== 0) {
            html += '<table class="table table-row-dashed table-fluid mb-0" style="width:' + tableWidth + '%;">\
            <thead>\
                <tr>\
                    <th style="width:' + width + '%">' + lajax.t("Language Code") + '</th>\
                    <th>' + lajax.t('Alternate Page') + '</th>\
                </tr>\
            </thead>\
            <tbody>';

            let j = 0;

            for (let i = 0; i < list.length; i++) {
                if (divideTables && !isMobileRequest() && (j % 6 == 0) && (j > 0)) {
                    html += '</tbody></table></div><div class="table-part"><table class="table table-row-dashed table-fluid mb-0" style="width:' + tableWidth + '%;"><tbody>';
                }

                j++;

                if (list[i]['hreflang'] != undefined)
                    html += '<tr><td style="width:' + width + '%; min-width:80px">%headingId%</td><td>%headingValue%</td></tr>'.strtr({
                        '%headingId%': list[i]['hreflang'],
                        '%headingValue%': highlightTarget ? '<span class="highlight-target">' + list[i]['href'] + '</span>' : list[i]['href']
                    });
            }
            html += '</tbody></table>';
        }
    }

    return wrapInButton(html);
}

function generateHeadersTable(check) {
    if (check === false || check.data.length == 0) {
        return '';
    }
    if (check.data['h1'] != undefined) {
        delete check.data['h1'];
    }

    return generateHeadersTableHtml(check.data);
}

async function generateSnippet(check, $element) {

    if (check === false) {
        return '';
    }
    const width = 600;

    let html = '<div class="snippet" id="snippet"><div id="snip" style="max-width:' + width + '"></div></div>';

    $element.append(html);

    if (check.data.length === 0) {
        $element.find('#snip').after(html);
        return;
    }

    let title = check.data[1];
    let description = check.data['description'];
    let domain = /(([^\/]+)\/\/([^\/]+))/.exec(check.data['url'])[0];
    let date = '';
    const titleLength = 60;

    if (new Date(check.data['date']) != "Invalid Date") {
        date = new Date(check.data['date']);
        date.setUTCHours(0, 0, 0, 0);
        const months = [
            'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
        ];
        date = date.getDate() + ' ' + months[date.getMonth()] + ' ' + date.getFullYear() + ' — ';
    }

    if (check.data['title'].trim().length <= titleLength) {
        title = check.data['title'];
    } else {
        let truncatedTitle = check.data['title'].substring(0, titleLength);
        if (truncatedTitle.indexOf('|') != -1) {
            truncatedTitle = truncatedTitle.substring(0, truncatedTitle.indexOf('|'));
        }
        const splittedTitle = check.data['title'].substring(truncatedTitle.lastIndexOf(' ') + 1, check.data['title'].length).split(' ');
        let maxWord = '';
        let nameFound = false;
        for (const i in splittedTitle) {
            if (splittedTitle[i] == '|') {
                nameFound = true;
                break;
            }
            if (i == splittedTitle.length - 1) {
                nameFound = true;
                maxWord += ' ' + splittedTitle[i];
                break;
            }
            if (!nameFound) {
                if (splittedTitle[i].length + maxWord.length + ' ...'.length <= 7) {
                    maxWord += ' ' + splittedTitle[i];
                } else {
                    break;
                }
            }
        }
        title = truncatedTitle.substring(0, truncatedTitle.lastIndexOf(' ')) + ' ' + maxWord;
        if (!nameFound) {
            title += ' ' + '...';
        }
    }

    if (check.data['url'].length > 50) {
        check.data['url'] = check.data['url'].substring(0, 50) + '...';
        domain = check.data['url'];
    }

    if (check.data['description'].length >= 150) {
        check.data['description'] = check.data['description'].replace(/&nbsp;/g, '');
        check.data['description'] = check.data['description'].substring(0, 150) + '...';
        description = check.data['description'].substring(0, check.data['description'].lastIndexOf(' ')) + ' ...';
    }

    html = '<div style="';
    if (isPdfRequest()) {
        html += 'width: 870px;">';
        document.getElementById('snippet').style.maxWidth = '920px';
        $('.competitor #snippet').css('maxWidth', '920px');
        // $('.competitor #snippet').css('width', '870px');
    } else {
        html += 'max-width: 900px;">'
    }

    let sizeFavicon = 0;

    function getImageDimensions(data) {
        return new Promise(function (resolved, rejected) {
            const preloadFavicon = new Image();
            preloadFavicon.onload = function () {
                resolved(preloadFavicon.height === 32 ? 26 : 18)
            };
            preloadFavicon.src = data
        })
    }

    if (check.data['favicon'] !== undefined) {
        sizeFavicon = await getImageDimensions(check.data['favicon']);
    }

    html += '<cite class="snippet-top-link-cite">';

    html += check.data['favicon'] === undefined ? '' : '<div class="d-flex overflow-hidden"><span class="favicon-container' +
        (check.data['favicon'].indexOf('notfound_favicon.svg') > 0 ? ' notfound-favicon' : '')  + '"><img ' +
        (sizeFavicon === 26 ? 'class="sz26" ' : '') + 'src="' + check.data['favicon'] +
        '" style="width:' + sizeFavicon + 'px; height:' + sizeFavicon + 'px;"></span>';
    html += check.data['favicon'] === undefined ? '<span class="snippet-top-link-domain">' + domain + '</span><span class="snippet-top-link-after-domain"><span class="snippet-arrow"><svg focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path></svg></span></span>'
        : '<div><span class="snippet-site-name">' + (check.data['siteName'] === undefined || check.data['siteName'] ==='' ? domain.replace(/https?:\/\//, '') : check.data['siteName']) +
        '</span><span class="snippet-top-link-domain">' + domain +
        '<span class="snippet-top-link-after-domain"><span class="snippet-arrow"><svg focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path></svg></span></span></span></div>';
    html += check.data['favicon'] === undefined ? '' : '</div>';

    html += '<div>';

    html += '<div class="snippet-text"><a class="snippet-link"><h3 class="snippet-H3 snippet-text">' + title + '</h3></a></div>';

    html += '<div class="snippet-main-block"><div class="snippet-inside-main-block"><span class="snippet-top-link-after-domain">';

    if (description.length != 0) {
        html += date;
    }

    html += '</span><span class="snippet-main-description snippet-text">' + description + '</span></div></div>';

    html += '</div>';
    html += '</cite>';
    html += '</div>';

    $element.find('#snip').after(html);

    return;
}

function generateCanonicalList(check) {
    if (check === false) {
        return '';
    }

    let html = '';
    if (check.data.length !== 0) {
        html += '<div class="table-responsive col-xl-6 mt-4"><table class="table table-row-dashed table-fluid mb-0"><tbody>';
        for (let i = 0; i < check.data.length; i++) {
            html += '<tr><td>' + check.data[i] + '</td></tr>';
        }
        html += '</tbody></table></div>';
    }

    return html;
}

function generateHreflangTable(check, highlightTarget) {
    if (highlightTarget === undefined) {
        highlightTarget = false;    // wkhtmltopdf doesn't support default params in function header
    }

    if ((check === false) || (check.data.length === 0)) {
         return '';
    }

    // do not generate if not passed for target
    if (highlightTarget && (check.passed === false)) {
        return '';
    }

    return generateHreflangTableHtml(check.data, highlightTarget);
}

function generateH1HeadersTable(check, highlightTarget) {
    if (highlightTarget === undefined) {
        highlightTarget = false;    // wkhtmltopdf doesn't support default params in function header
    }
    if (check === false || check.data.length === 0 || check.data['h1'] == undefined) {
        return '';
    }

    // do not generate if not passed for target
    if (highlightTarget && check.passed === false) {
        return '';
    }

    return generateHeadersTableHtml({'h1': check.data['h1']}, highlightTarget);
}

function generateKeywordsTable(check, type = 'keywords') {
    if (check.data === undefined || check.data[type].length == 0) {
        return '';
    }

    const data = check.data[type];
    if (data === false) {
        return '';
    }

    let html = '\
        <div class="fs-2 my-4 text-center text-gray-700 avoid-break-after">' + (type==='keywords' ? lajax.t("Individual Keywords") : lajax.t("Phrases")) + '</div><div class="table-responsive table-part"><table class="table table-row-dashed table-fluid">\
            <thead>\
                <th style="width:20%">' + (type ==='keywords' ? lajax.t("Keyword") : lajax.t("Phrase")) + '</th>\
                <th style="width:' + (isPdfRequest() ? 12 : 15) + '%">' + lajax.t("Title") + '</th>\
                <th style="width:' + (isPdfRequest() ? 17 : 15) + '%">' + lajax.t("Meta Description Tag") + '</th>\
                <th style="width:' + (isPdfRequest() ? 13 : 15) + '%">' + lajax.t("Headings Tags") + '</th>\
                <th style="width:' + (isPdfRequest() ? 13 : 15) + '%">' + lajax.t("Page Frequency") + '</th>\
                <th style="width:' + (isPdfRequest() ? 25 : 20) + '%"></th>\
            </thead>\
            <tbody>';

    let j = 1;
    for (const i in data) {
        const word = data[i];

        html += '\
            <tr>\
                <td>' + word.word + '</td>\
                <td><i class="ki-duotone fs-1 ' + (word.title ? 'ki-check text-success' : 'ki-cross text-danger') + '"><span class="path1"></span><span class="path2"></span></i></td>\
                <td><i class="ki-duotone fs-1 ' + (word.description ? 'ki-check text-success' : 'ki-cross text-danger') + '"><span class="path1"></span><span class="path2"></span></i></td>\
                <td><i class="ki-duotone fs-1 ' + (word.headers ? 'ki-check text-success' : 'ki-cross text-danger') + '"><span class="path1"></span><span class="path2"></span></i></td>\
                <td>' + Number(word.count) + '</td>\
                <td class="volume-bar-wrapper min-w-100px"><div><span style="width: ' + Number(word.grade) + '%;"></span></div></td>\
            </tr>';
        j++;
    }

    html += '</tbody></table></div>';

    return html;
}

function generateKeywordsAndPhrasesTable(wid, check) {
    const html = '<div class="answer keywords field-details field-value-table avoid-break-inside">'
        + generateKeywordsTable(check, 'keywords')
        + '</div><div class="answer phrases field-details field-value-table avoid-break-inside">'
        + generateKeywordsTable(check, 'phrases')
        + '</div>';

    return wrapInButton(html, wid);
}

function generateImageList(check) {
    if (check === false || check.data.list.length == 0) {
        return '';
    }
    let html = '';
    const firstColumnWidth = isPdfRequest() ? 70 : 50;

    html += '<div class="table-part"><table class="table table-row-dashed table-fluid table-wrapped">' +
        '<thead><tr><th width="%width%px">#</th><th>%imageLink%</th></tr></thead><tbody>'.strtr({
            '%imageLink%': lajax.t("Image link"),
            '%width%' : firstColumnWidth,
        });

    let j = 0;
    for (let i = 0; i < check.data.list.length; i++) {
        const imageUrl = check.data.list[i];

        if (divideTables && !isMobileRequest() && (j % 6 == 0) && (j > 0)) {
            html += '</tbody></table></div><div class="table-part"><table class="table table-row-dashed table-fluid table-wrapped"><tbody>';
        }

        html += '<tr><td width="%width%px">%id%</td><td data-raw-data="%raw-data%">%url%</td></tr>'.strtr({
            '%id%': parseInt(j) + 1,
            '%url%': imageUrl,
            '%width%' : firstColumnWidth,
        });

        j++;
    }

    html += '</tbody></table></div>';

    if (j == 0) {
        return '';
    }

    return wrapInButton(html);
}

function generateTargetImageList(check) {
    if (check === false || check.data.list.length == 0) {
        return '';
    }

    let html = '<div class="table-part"><table class="table table-row-dashed table-fluid table-wrapped">' +
        '<thead><tr><th width="50px">#</th><th style="width:45%">%imageLink%</th><th>%imageAlt%</th></tr></thead><tbody>'.strtr({
            '%imageLink%': lajax.t("Image link"),
            '%imageAlt%': lajax.t("Alt Text"),
        });

    let j = 0;
    for (let i = 0; i < check.data.list.length; i++) {
        const image_tag = check.data.list[i];
        let matches = image_tag.match('alt\\s*=\\s*"(.+?)"');
        if (matches === null || matches.length != 2) {
            continue;
        }
        const alt_text = matches[1];
        matches = image_tag.match('src\\s*=\\s*"(.+?)"');
        let image_url = '';
        if (matches !== null && matches.length === 2) {
            image_url = matches[1];
        }

        // skip images without target keyword
        if ((targetKeyword === '') || alt_text.match(targetKeywordRegexp) === null) {
            continue;
        }

        if (divideTables && !isMobileRequest() && (j % 6 == 0) && (j > 0)) {
            html += '</tbody></table></div><div class="table-part"><table class="table table-row-dashed table-fluid table-wrapped"><tbody>';
        }

        html += '<tr><td width="50px">%id%</td><td data-raw-data="%raw-data%">%url%</td><td>%alt%</td></tr>'.strtr({
            '%id%': parseInt(j) + 1,
            '%url%': image_url.replace(/^.*[\\\/]/, ''),
            '%alt%': '<span class="highlight-target">' + alt_text.replace(/^.*[\\\/]/, '') + '</span>',
        });
        j++;
    }

    html += '</tbody></table></div>';
    if (j == 0) {
        return '';
    }

    return wrapInButton(html);
}

function generateNonFriendlyUrlTable(check) {
    if (check === false || check.data.length == 0) {
        return '';
    }

    let firstColWidth = 5;
    let secondColWidth = 40;
    let secondColMinWidth = ' min-width: 280px;';
    let checkColWidth = 9;

    if (isPdfRequest()) {
        secondColMinWidth = '';
    }

    let html = '';
    html += '\
        <div class="table-responsive table-part">\
            <table class="table first table-row-dashed table-fluid">\
            <thead>\
                <th style="width:' + firstColWidth + '%;">' + lajax.t("Line") + '</th>\
                <th style="width:' + secondColWidth + '%;' + secondColMinWidth + '" >' + lajax.t("Link") + '</th>\
                <th style="width:' + checkColWidth + '%;"><div>' + lajax.t("Underscores") + '</div></th>\
                <th style="width:' + checkColWidth + '%;"><div>' + lajax.t("Parameters") + '</div></th>\
                <th style="width:' + checkColWidth + '%;"><div>' + lajax.t("Symbols") + '</div></th>\
                <th style="width:' + checkColWidth + '%;"><div>' + lajax.t("File Names").replace(new RegExp(' ', 'g'), '&nbsp;') + '</div></th>\
                <th style="width:' + checkColWidth + '%;"><div>' + lajax.t("Path Depth").replace(new RegExp(' ', 'g'), '&nbsp;') + '</div></th>\
                <th style="width:' + checkColWidth + '%;"><div>' + lajax.t("Length") + '</div></th>\
            </thead>\
            <tbody>';

    const labelCheckNo = '<i class="ki-duotone fs-1 ki-cross text-danger"><span class="path1"></span><span class="path2"></span></i>';
    const labelCheckYes = '<i class="ki-duotone fs-1 ki-check text-success"><span class="path1"></span><span class="path2"></span></i>';
    for (const l in check.data) {
        const link = check.data[l];

        if (divideTables && isPdfRequest() && (l % 6 == 0) && (l > 0)) {
            html += '</tbody></table></div><div class="table-responsive table-part"><table class="table table-row-dashed table-fluid"><tbody>';
        }

        html += '\
            <tr>\
                <td style="width:' + firstColWidth + '%;">' + link.line + '</td>\
                <td style="word-wrap: break-word; word-break: break-all;width:' + secondColWidth + '%;' + secondColMinWidth + '" >' + link.link + '</td>\
                <td style="width:' + checkColWidth + '%;">' + (link.details[0] == 1 ? labelCheckNo : labelCheckYes) + '</td>\
                <td style="width:' + checkColWidth + '%;">' + (link.details[1] == 1 ? labelCheckNo : labelCheckYes) + '</td>\
                <td style="width:' + checkColWidth + '%;">' + (link.details[2] == 1 ? labelCheckNo : labelCheckYes) + '</td>\
                <td style="width:' + checkColWidth + '%;">' + (link.details[3] == 1 ? labelCheckNo : labelCheckYes) + '</td>\
                <td style="width:' + checkColWidth + '%;">' + (link.details[4] == 1 ? labelCheckNo : labelCheckYes) + '</td>\
                <td style="width:' + checkColWidth + '%;">' + (link.details[5] == 1 ? labelCheckNo : labelCheckYes) + '</td>\
            </tr>';
    }

    html += '</tbody></table></div>';

    return wrapInButton(html);
}

function generateAnalyticsList(check) {
    if (check === false) {
        return '';
    }
    let html = '';
    if (check.data.length > 0) {
        html += '\
            <div class="table-responsive table-part col-xl-6 mt-4"><table class="table table-row-dashed table-fluid">\
                <tbody>';
        for (const i in check.data) {
            const record = check.data[i];
            html += '\
                    <tr>\
                        <td>\
                            <img class="table-icon" src="/img/analytics/' + record.id + '.png" />&nbsp;&nbsp;' + record.name + '\
                        </td>\
                    </tr>';
        }
        html += '\
                </tbody>\
            </table></div>';
    }

    return html;
}

function generateDeprecatedTagsTable(check) {
    if (check === false || check.data.length == 0) {
        return '';
    }
    let html = '<div class="table-responsive"><table class="table table-row-dashed table-fluid">\
        <thead>\
            <th>' + lajax.t("Line") + '</th>\
            <th>' + lajax.t("Deprecated Tags") + '</th>\
            <th>' + lajax.t("Occurrences") + '</th>\
        </thead>\
        <tbody>';

    for (const i in check.data) {
        const tag = check.data[i];
        html += '<tr><td>%line%</td><td>%tag%</td><td>%html%</td></tr>'.strtr({
            '%line%': tag['line'],
            '%tag%': tag['tag'],
            '%html%': tag['html'].replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')
        });
    }
    html += '\
            </tbody>\
        </table></div>';

    return wrapInButton(html);
}

function generateInlineCssTable(check) {
    if (check === false || check.data.length == 0) {
        return '';
    }

    const width = isPdfRequest() ? 100: 70;

    let html = '\
        <div class=" table-part"><table class="table table-row-dashed table-fluid table-wrapped">\
            <thead><tr>\
                <th style="width: ' + width + 'px;">' + lajax.t("Line") + '</th>\
                <th>' + lajax.t("Style") + '</th>\
            </tr></thead>\
            <tbody>';

    let i = 0;
    for (const style in check.data) {

        if (divideTables && !isMobileRequest() && (i % 6 == 0) && (i > 0)) {
            html += '</tbody></table></div><div class="table-part"><table class="table table-row-dashed table-fluid table-wrapped"><tbody>';
        }

        const object = check.data[style];

        html += '\
            <tr>\
                <td style="width: ' + width + 'px;">' + Number(object['line']) + '</td>\
                <td>' + object['style'] + '</td>\
            </tr>';

        i++;
    }
    html += '</tbody></table></div>';

    return wrapInButton(html);
}

function generateEmailTable(check) {
    if (check === false || check.data.length == 0) {
        return '';
    }
    let html = '\
        <div class="table-responsive col-xl-6"><table class="table table-row-dashed table-fluid">\
            <thead><tr>\
                <th>' + lajax.t("Line") + '</th>\
                <th>Email</th>\
            </tr></thead>\
            <tbody>';

    for (const l in check.data) {
        const details = check.data[l];
        html += '\
            <tr>\
                <td>' + details['line'] + '</td>\
                <td>' + details['email'] + '</td>\
            </tr>';
    }

    html += '</tbody></table></div>';

    return wrapInButton(html);
}

function generateTopKeywordRankingsTable(check) {
    if (check == false || (check && check.hideTable))  {
        return ;
    }

    let HeadersString = '<th width="25%">' + lajax.t('Keyword') + '</th>';
    HeadersString += '<th width="' + (isPdfRequest() ? '12%' : '10%') + '">' + lajax.t('Country').replace(' ', '&nbsp;').replace(' ', '<br>') + '</th>';
    HeadersString += '<th width="10%">' + lajax.t('Position') + '</th>';
    HeadersString += '<th>' + lajax.t('Total Searches') + '</th>';
    HeadersString += '<th>' + lajax.t('Estimated Traffic') + '</th>';
    HeadersString += '<th width="15%" style="min-width: 120px;"></th>';
    let html = '\
        <table class="table table-row-dashed align-middle my-0 avoid-break-inside">\
            <thead><tr>' + HeadersString + '</tr></thead>\
            <tbody>';

    if ((typeof check.data === 'object') && (check.data !== null)) {
        let maxValue = 0;

        $.each(check.data, function (key, value) {
            const etv = parseInt((value.etv).replace(/,/g, ''));
            if (etv > maxValue) {
                maxValue = etv;
            }
        });

        $.each(check.data, function (i, item) {
            const etv = parseInt((item.etv).replace(/,/g, ''));
            const width = (maxValue !== 0) ? (etv / maxValue * 100) : 0;
            let rowContent = '';

            rowContent += '<td>' + item.key + '</td>';
            rowContent += '<td class="flag-col"><span class="country-flag-icon flag-icon flag-icon-' + item.country_code.toLowerCase() + ' flag-icon-squared"></span></td>';
            rowContent += '<td>' + item.position + '</td>';
            rowContent += '<td>' + numberWithCommas(item.search_volume) + '</td>';
            rowContent += '<td>' + numberWithCommas(item.etv) + '</td>';
            rowContent += '<td width="25%" class="volume-bar-wrapper min-w-125px"><div><span class="table-chart-item" style="width: ' + width + '%;"></span></div></td>';
            const htmlRow = '<tr>' + rowContent + '</tr>';

            html += htmlRow;
        });
    } else {
        html += '<tr class="odd"><td valign="top" colspan="6" class="text-center">' + lajax.t('No data available in table') + '</td></tr>';
    }

    html += '</tbody></table>';

    // Track button hack for main website only
    if ($('.field-topKeywordRankings .field-track').length > 2) { // template and main website
        $('.field-topKeywordRankings .field-track').each(function(index) {
            if (index > 1) {
                $(this).remove();
            }
        })
    }

    return html;
}

function generateKeywordPositionsTable(check) {
    if (check == false) {
        return ;
    }

    const positions = check.data;
    let maxValue = 0;

    $.each(positions, function (key, value) {
        if (value > maxValue) {
            maxValue = value;
        }
    });

    let content = '';
    $.each(positions, function (key, value) {
        const width = (maxValue !== 0) ? (value / maxValue * 100) : 0;
        content += '<tr><td>' + key + '</td><td>' + numberWithCommas(value) + '</td><td class="volume-bar-wrapper min-w-100px"><div><span class="table-chart-item" style="width:' + width + '%;"></span></div></td></tr>';

    });

    content = content.length ? content : '<tr class="odd"><td valign="top" colspan="6" class="text-center">' + lajax.t('No data available in table') + '</td></tr>';

    return content;
}

function generateTotalTrafficStats(check) {
    if (check == false) {
        return;
    }

    return '<span>' + lajax.t('This shows you the Estimated Traffic Volume your page receives from it’s Keyword Rankings') + '</span>\
        <div class="competitor-sizer">\
            <div class="row g-3 mt-0">\
               <div class="col-10 col-sm-7 col-md-5 col-xxl-3 col-pdf-4">\
                    <div class="card h-lg-100">\
                        <div class="card-body d-flex justify-content-start align-items-start flex-column pb-7 px-9 p-pdf-6">\
                            <div class="m-0">\
                                <i class="ki-duotone ki-chart-simple-3 fs-2hx text-gray-600"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span></i>\
                            </div>\
                            <div class="d-flex flex-column mt-6">\
                                <span class="fw-semibold fs-2qx fs-pdf-1 text-gray-800 lh-1 ls-n2">' + numberWithCommas(check.value) + '</span>\
                                <div class="m-0 mt-2 text-wrap">\
                                    <span class="fw-semibold fs-6 fs-pdf-7 text-gray-500 card-tile-title">' + lajax.t('Monthly Traffic Volume') + '</span>\
                                </div>\
                            </div>\
                        </div>\
                    </div>\
                </div>\
            </div>\
        </div>';
}

function numberWithCommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function generateSubpagesTable(check, $element) {
    if (check === false) {
        return '';
    }

    const locationUrl = window.location.protocol + '//' +  window.location.host;
    let html = '';
    const length = Object.keys(check.data).length;
    const limit = 12;
    let current = 0;
    let tableClass = 'table table-row-dashed table-fluid mb-0';

    if (length === 0) {
        html = '<div class="row no-subpages">' + lajax.t("No Sub-Pages Found") + '</div>';

        $element.append(html);

        return;
    }

    if (isMobileRequest()) {
        tableClass += ' table-wrapped'
    }

    if (length < limit) {

        html = '<table class="' + tableClass + '">\
                <thead>\
                    <tr><th width="100%">' + lajax.t("Page") + '</th></tr>\
                </thead>\
                <tbody>';

        $.each(check.data, function () {
            let title = this.title.trim();
            let fullLink = this.link;

            if ((template !== undefined) && (template.toString() !== '0')) {
                fullLink = '/template/' + template + fullLink;
            }

            current++;

            if (title === '') {
                title = '<i>' + lajax.t("Image Link") + '</i>';
            }
            if (isPdfRequest()) {
                html += '<tr><td>%title%</td></tr>'.strtr({
                    '%title%': title
                });
            } else {
                html += '<tr><td><a class="no-link-pdf" %link% >%title%</a></td></tr>'.strtr({
                    '%link%': 'href="' + locationUrl + fullLink + '"',
                    '%title%': title
                });
            }
        });

        html += '</tbody></table>';

        $element.find('.field-value').before(html);

        return html;
    }

    $.each(check.data, function () {
        let title = this.title.trim();
        let fullLink = this.link;

        if ((template !== undefined) && (template.toString() !== '0')) {
            fullLink = '/template/' + template + fullLink;
        }

        current++;

        if (title === '') {
            title = '<i>' + lajax.t("Image Link") + '</i>';
        }
        if (isPdfRequest()) {
            html += '<tr><td>%title%</td></tr>'.strtr({
                '%title%': title
            });
        } else {
            html += '<tr><td><a class="no-link-pdf" %link% >%title%</a></td></tr>'.strtr({
                '%link%': 'href="' + fullLink + '"',
                '%title%': title
            });
        }
        if (current === limit) {
            $element.find('.field-value').before('<table class="' + tableClass + '">\
                <thead>\
                    <tr><th width="100%">' + lajax.t("Page") + '</th></tr>\
                </thead>\
                <tbody>' + html + '</tbody></table>' +
                '<div id="subpagesmore" class="btn-block btn btn-light btn-sm btn-show-subpagesmore hidden-pdf mt-4" onclick="showMore(\'subpagesmore\'); return click;">' + lajax.t("Show me more") + '</div>');

            html = '<div class="subpagesmore row-hidden"><div class=" table-part"><table class="' + tableClass + ' mb-0"><tbody>';
        }

        if (divideTables && !isMobileRequest() && (current > limit) && (current % 4 == 0)) {
            html += '</tbody></table></div></div><div class="subpagesmore row-hidden"><div class=" table-part"><table class="' + tableClass + ' mb-0"><tbody>';
        }

    });

    html += '</tbody></table></div></div>';

    if (current > limit) {
        html += '<div class="btn-block btn btn-light btn-sm btn-hide-subpagesmore hidden-pdf mt-4" style="display:none;" onclick="hideMore(\'subpagesmore\'); return click;">' + lajax.t("Hide Details") + '</div>';
    }

    if (length === 0) {
        html = '<div class="row">' + lajax.t("No Sub-Pages Found") + '</div>';
    }

    $element.append(html);

    return html;
}

/**
 * @param {object} check
 * @param wid
 * @returns {string}
 */
function generateOnPageLinks(check, wid) {
    if (check === false || check.data.links.length === 0) {
        return '';
    }
    const width = isPdfRequest() ? 70 : 60;

    let html = '<div class="table-responsive table-part"><table class="table table-row-dashed table-fluid">';
    html += '<thead><tr><th width="%width%%">%page%</th><th width="%widthSmall%%">%type%</th><th width="%widthSmall%%">%follow%</th></tr></thead><tbody>'.strtr({
        '%width%' : width,
        '%widthSmall%': (100 - width) / 2,
        '%page%': lajax.t("Page"),
        '%type%': lajax.t("Type"),
        '%follow%': lajax.t("Follow/ Nofollow")
    });
    let i = 0;
    for (const j in check.data.links) {
        const link = check.data.links[j];
        let linkType = link.type;
        let linkJuice = link.juice;

        if (linkJuice === 'Follow') {
            linkJuice = '<span class="badge badge-light-success">' + lajax.t('Follow') + '</span>';
        } else if (linkJuice === 'Nofollow') {
            linkJuice = '<span class="badge badge-light-danger">' + lajax.t('Nofollow') + '</span>';
        }

        if (linkType === 'External') {
            linkType = '<span class="badge badge-light">' + lajax.t('External')  + '</span>';
        } else if (linkType === 'Internal') {
            linkType = '<span class="badge badge-light-primary">' + lajax.t('Internal') + '</span>';
        }

        i++;

        /* This is to regroup a long table in a set of small tables so that they break in pages better in PDF */
        if (divideTables && !isMobileRequest() && (i % 6 == 0)) {
            html += '</tbody></table></div><div class="table-responsive table-part"><table class="table table-row-dashed table-fluid"><tbody>';
        }

        html += '<tr class=""><td width="%width%%">%link%</td><td width="%widthSmall%%">%linkType%</td><td width="%widthSmall%%">%linkJuice%</td></tr>'.strtr({
            '%width%' : width,
            '%widthSmall%': (100 - width) / 2,
            '%link%': link.link,
            '%linkType%': linkType,
            '%linkJuice%': linkJuice
        });
    }

    html += '</tbody></table></div>';

    // 'On-Page Links'
    let selector = check.name + wid;
    const colors = ['primary', 'success', 'danger'];

    const sizeDonutData = [
        {
            data: check.data.internalFollowCount + check.data.internalNofollowCount,
            label: lajax.t('Internal Links'),
        },
        {
            data: check.data.externalFollowCount,
            label: lajax.t('External Links: Follow'),
        },
        {
            data: check.data.externalNofollowCount,
            label: lajax.t('External Links: Nofollow'),
        }
    ]
    setTimeout(function() {
        $('#' + selector + ' .on-page-links-container').removeClass('d-none');
        DonutChart.init(wid, selector, 'on-page-links', sizeDonutData, colors, check.data.total);
    }, 250);

    return wrapInButton(html);
}

function generateYoutubeActivity(check) {
    if (check === false || check === undefined || check.data === false) {
        return '';
    }

    const activityStats = [
        { data: check.data.subscribers, icon: 'ki-people', title: lajax.t("Followers")},
        { data: check.data.views, icon: 'ki-eye', title: lajax.t("View Count")},
    ]
    let html = '<div class="w-100">\
            <div class="item-image-social youtube-image_official"></div>\
            <div class="competitor-sizer"><div class="row row-gap-5 gx-3 gx-xl-5">';

    for (const i in activityStats) {
        html+='<div class="col-10 col-sm-7 col-md-10 col-xxl-6 col-pdf-6">\
                    <div class="card h-lg-100">\
                        <div class="card-body d-flex justify-content-start align-items-start flex-column pb-7 px-9 p-pdf-6">\
                            <div class="m-0">\
                                <i class="ki-duotone ' + activityStats[i].icon + ' fs-2hx text-gray-600">\
                                    <span class="path1"></span>\
                                    <span class="path2"></span>\
                                    <span class="path3"></span>\
                                    <span class="path4"></span>\
                                    <span class="path5"></span>\
                                </i>\
                            </div>\
                            <div class="d-flex flex-column mt-6 mt-pdf-5">\
                                <span class="fw-semibold fs-2qx fs-pdf-1 text-gray-800 lh-1 ls-n2">' + nFormatter(activityStats[i].data, 1) + '</span>\
                                <div class="m-0 mt-2 text-wrap">\
                                    <span class="fw-semibold fs-6 fs-pdf-7 text-gray-500 card-tile-title">' + activityStats[i].title + '</span>\
                                </div>\
                            </div>\
                        </div>\
                    </div>\
                </div>';
    }
    html += '</div></div>\
    </div>';
    return html;
}

function generateSitemapList(check, wid) {
    if (check === false) {
        return '';
    }

    let html = '';

    if (check.data.urls.length > 0) {
        html += '<div class="table-responsive table-part col-xl-6 mt-4"><table class="table table-row-dashed table-fluid table-wrapped"><tbody>';

        let l = 0;
        for (const i in check.data.urls) {

            if (divideTables && !isMobileRequest() && (l % 6 == 0) && (l > 0)) {
                html += '</tbody></table></div><div class="table-responsive table-part col-xl-6"><table class="table table-row-dashed table-fluid"><tbody>';
            }

            html += '<tr><td>' + check.data.urls[i] + '</td></tr>';

            l++;
        }

        html += '</tbody></table></div>';

    } else {
        if (!isAgency && (wid == websiteId)) {
            html += '<p class="our-free-tool d-flex flex-wrap align-items-center mb-0">' + lajax.t("Create it yourself with our free tool:") + ' &nbsp; <a target="_blank" href="' + infoUrls['sitemapGenerator'].url + '" onClick="event.stopPropagation();return true;">' + lajax.t("XML Sitemap Generator") + '</a></p>'
        }
    }
    if (check.data.found > check.data.tested) {
        html += '<div class="mt-4">' + lajax.t('More Sitemaps were found, but not tested.') + '</div>';
    }

    return html;
}

function generateRobotsTxtList(check, wid) {
    if (check === false) {
        return '';
    }
    let html = '';

    if (check.passed) {
        html += '<div class="table-responsive col-xl-6 mt-4 table-part"><table class="table table-row-dashed table-fluid"><tbody><tr><td>' +
            check.data + '</td></tr></tbody></table></div>';
    } else {
        if (!isAgency && wid == websiteId) {
            html += '<p class="our-free-tool d-flex align-items-center flex-wrap ">' + lajax.t("Create it yourself with our free tool:") + ' &nbsp; <a target="_blank" href="' + infoUrls['robotsGenerator'].url + '" onClick="event.stopPropagation();return true;">' + lajax.t("robots.txt File Generator") + '</a></p>'
        }
    }

    return html;
}

function generateNonMinifiedList(check) {
    if (check === false || check === undefined) {
        return '';
    }
    let html = '';

    if (check.data.length > 0) {
        html += '<div class="table-responsive table-part"><table class="table table-row-dashed table-fluid">\
           <thead><tr><th>' + lajax.t("File") + '</th><th style="width:14%;">' + lajax.t("File Size") + '</th><th style="width:14%;">' + lajax.t("Save Size") + '</th><th style="width:14%;">' + lajax.t("Save Percentage") + '</th></tr></thead>\
           <tbody>';

        for (const i in check.data) {

            const link = check.data[i];

            html += '<tr><td>' + link[0] + '</td><td>' + link[1] + '</td><td>' + link[2] + '</td><td>' + link[3] + '</td></tr>';
        }

        html += '</tbody></table></div>';

        $('.field-%field% .js-collapse-in'.replace('%field%', check.name)).show();
    }

    return wrapInButton(html);
}


function generateBacklinksList(wid, check) {
    if (check === false || check === undefined || check.data === false || check.data === undefined || check.data.length === 0) {
        return '';
    }

    let rows = '<div class="table-part table-responsive">\n' +
        '           <table class="table table-row-dashed top-backlinks-table">\n' +
        '               <thead>\n' +
        '                  <tr>\n' +
        '                     <th width="5%">' + lajax.t('Domain strength').replace(new RegExp(' ', 'g'), '<br/>') + '</th>\n' +
        '                     <th width="35%" class="top-backlinks-ref-url-cell">' + lajax.t('Referring Page URL') + '</th>\n' +
        '                     <th width="30%" class="hidden-pdf">' + lajax.t('Referring Page Title') + '</th>\n' +
        '                     <th width="30%" class="hidden-pdf">' + lajax.t('Anchor Text') + '</th>\n' +
        '                 </tr>\n' +
        '               </thead>\n' +
        '               <tbody>\n';

    for (const i in check.data) {
        const rowData = check.data[i];
        if (!rowData['url'] || !rowData['anchor_text']) {
            continue;
        }

        rows += '<tr><td>%domain_strength%</td><td class="top-backlinks-ref-url-cell"><span rel="nofollow" href="//%url%">%url%</span></td><td class="hidden-pdf">%title%</td><td class="hidden-pdf">%anchor_text%</td></tr>'.strtr({
            '%domain_strength%': rowData['domain_authority'],
            '%url%': rowData['url'],
            '%title%': rowData['title'],
            '%anchor_text%': rowData['anchor_text'],
        });
    }

    rows += '</tbody></table></div>';

    $('.field-backlinks-list').show();

    return wrapInButton(rows, wid);
}

function generateBacklinksTopPages(wid, check) {
    let i;
    let rowData;
    if (check === false || check === undefined || check.data === false || check.data === undefined || check.data.length === 0) {
        return '';
    }

    let maxValue = 0;
    for (i in check.data) {
        rowData = check.data[i];
        if (rowData['backlinks'] && rowData['backlinks'] > maxValue) {
            maxValue = rowData['backlinks'];
        }
    }

    let rows = '<div class="table-part table-responsive">\n' +
        '           <table class="table table-row-dashed" style="width: 100%">\n' +
        '               <thead>\n' +
        '                  <tr>\n' +
        '                     <th style="width: 50%">' + lajax.t('URL') + '</th>\n' +
        '                     <th style="width: 12%">' + lajax.t('Backlinks') + '</th>\n' +
        '                     <th style="min-width: ' + (isPdfRequest() ? 250 : 170) + 'px"></th>\n' +
        '                 </tr>\n' +
        '               </thead>\n' +
        '               <tbody>\n';

    for (i in check.data) {
        rowData = check.data[i];
        if (!rowData['url'] || !rowData['backlinks']) {
            continue;
        }

        const width = (rowData['backlinks'] / maxValue) * 100;
        rows += '<tr><td class="top-backlinks-ref-url-cell"><span rel="nofollow" href="//%url%">%url%</span></td><td class="no-break-pdf">%backlinks%</td><td class="volume-bar-wrapper min-w-100px"><div><span style="width: %width%"></span></div></td></tr>'.strtr({
            '%url%': shortenText(rowData['url']),
            '%backlinks%': numberWithCommas(rowData['backlinks']),
            '%width%': width + '%',
        });
    }

    rows += '</tbody></table></div>';

    $('.field-backlinks-list').show();

    return wrapInButton(rows, wid);
}

function shortenText(text) {
    const maxLength = 70;

    if (text.length > maxLength) {
        text = text.substring(0, maxLength) + '...';
    }
    return text;
}

function generateBacklinksTopAnchors(wid, check) {
    let i;
    let rowData;
    if (check === false || check === undefined || check.data === false || check.data === undefined || check.data.length === 0) {
        return '';
    }

    let maxValue = 0;
    for (i in check.data) {
        rowData = check.data[i];
        if (rowData['backlinks'] && rowData['backlinks'] > maxValue) {
            maxValue = rowData['backlinks'];
        }
    }

    let rows = '<div class="table-part table-responsive">\n' +
        '           <table class="table table-row-dashed">\n' +
        '               <thead>\n' +
        '                  <tr>\n' +
        '                     <th style="width: 50%">' + lajax.t('Anchor') + '</th>\n' +
        '                     <th style="width: 12%">' + lajax.t('Backlinks') + '</th>\n' +
        '                     <th style="min-width: ' + (isPdfRequest() ? 250 : 170) + 'px"></th>\n' +
        '                 </tr>\n' +
        '               </thead>\n' +
        '               <tbody>\n';

    for (i in check.data) {
        rowData = check.data[i];
        if (!rowData['anchor'] || !rowData['backlinks']) {
            continue;
        }

        const width = (rowData['backlinks'] / maxValue) * 100;
        rows += '<tr><td class="top-backlinks-ref-url-cell">%anchor%</td><td class="no-break-pdf">%backlinks%</td><td class="volume-bar-wrapper min-w-100px"><div><span style="width: %width%"></span></div></td></tr>'.strtr({
            '%anchor%': rowData['anchor'],
            '%backlinks%': numberWithCommas(rowData['backlinks']),
            '%width%': width + '%',
        });
    }

    rows += '</tbody></table></div>';

    $('.field-backlinks-list').show();

    return wrapInButton(rows, wid);
}

function generateBacklinksTopGeographiesCharts(wid, check) {
    if (check.data === undefined || check.data.countries === undefined || check.data.tlds === undefined || check.data.countries.length === 0 || check.data.tlds.length === 0) {
        return false;
    }

    // Top Countries
    const countries = check.data.countries.slice(0, 4);
    const totalCountriesCount = countries.reduce(function (a, b) {
        return a + b.count;
    }, 0);

    const allbacklinks = check.data.allbacklinks;

    if (totalCountriesCount < allbacklinks) {
        countries.push({
            country: 'Other',
            count: allbacklinks - totalCountriesCount,
        });
    }

    const countriesPieData = countries.map(function (item) {
        return {
            data: item.count,
            label: item.country === 'Other' ? item.country : item.country.toUpperCase(),
        };
    });

    let selector = check.name + wid;
    const colors = ['primary', 'success', 'cyan', 'danger', 'gray-400'];

    setTimeout(function () {
        DonutChart.init(wid, selector, wid === websiteId ? 'backlink-top-countries-chart' : 'backlink-top-countries-chart-competitor', countriesPieData, colors, allbacklinks);
    }, 250);

    // Top TLDs
    const tlds = check.data.tlds.slice(0, 4);
    const totalTldsCount = tlds.reduce(function (a, b) {
        return a + b.count;
    }, 0);

    if (totalTldsCount < allbacklinks) {
        tlds.push({
            tld: 'Other',
            count: allbacklinks - totalTldsCount,
        });
    }

    const tldsPieData = tlds.map(function (item) {
        return {
            data: item.count,
            label: item.tld,
        };
    });

    selector = check.name + wid;

    setTimeout(function() {
        DonutChart.init(wid, selector, wid === websiteId ? 'backlink-top-tlds-chart' : 'backlink-top-tlds-chart-competitor', tldsPieData, colors, allbacklinks);
    }, 250);

    let chartsContainer;
    if (wid === websiteId){
        chartsContainer = $('#' + selector).find('.top-geographies-container');
    } else {
        chartsContainer = $('#' + selector).find('.top-geographies-container-competitor');
        chartsContainer.addClass('competitor-charts-container');
    }

    chartsContainer.show();

    return true;
}

function generateAmpTagsInfo(check) {
    if (check === false || check === undefined || check.data === false || check.data === undefined) {
        return '';
    }

    const strTemplate = '<tr><td>%title%</td><td><i class="ki-duotone fs-1 %classes%"><span class="path1"></span><span class="path2"></span></i></td></tr>';

    let rows = '<div class="table-part table-responsive">\n' +
        '           <div class="col-md-6 p-0">\n' +
        '               <table class="table table-row-dashed">\n' +
        '                   <thead>\n' +
        '                       <tr>\n' +
        '                           <th>' + lajax.t('AMP Indicator') + '</th>\n' +
        '                           <th></th>\n' +
        '                       </tr>\n' +
        '                   </thead>\n' +
        '                   <tbody>\n' +
        strTemplate.strtr({
            '%title%': lajax.t('AMP Related Doctype Declaration'),
            '%classes%': check.data.isAmpOpenTag ? 'ki-check text-success' : 'ki-cross text-danger',
        }) +
        strTemplate.strtr({
            '%title%': lajax.t('AMP Runtime'),
            '%classes%': check.data.isAmpScriptTag ? 'ki-check text-success' : 'ki-cross text-danger',
        }) +
        strTemplate.strtr({
            '%title%': lajax.t('AMP CSS Boilerplate'),
            '%classes%': check.data.hasAmpBoilerplate ? 'ki-check text-success' : 'ki-cross text-danger',
        }) +
        strTemplate.strtr({
            '%title%': lajax.t('Embedded Inline Custom CS'),
            '%classes%': check.data.hasAmpCustomStyles ? 'ki-check text-success' : 'ki-cross text-danger',
        });
    if (check.data.customStyleLengthAlert === true) {
        rows += '                       <tr>\n' +
            '                           <td colspan="2" class="text-danger"> * ' + lajax.t('Custom styles size is larger than 70 Kb') + '</td>\n' +
            '                       </tr>\n';
    }

    rows += strTemplate.strtr({
            '%title%': lajax.t('AMP Images'),
            '%classes%': check.data.hasAmpImgTag ? 'ki-check text-success' : 'ki-cross text-danger',
        });
    rows += strTemplate.strtr({
        '%title%': lajax.t('AMP HTML Canonical Link'),
        '%classes%': check.data.hasCanonicalLink ? 'ki-check text-success' : 'ki-cross text-danger',
    });
    rows += '</tbody></table></div></div>'
    return wrapInButton(rows);
}

function nFormatter(num, digits) {
    if (num === null || num === undefined) {
        return 0;
    }

    const si = [
        {value: 1, symbol: ""},
        {value: 1E3, symbol: "K"},
        {value: 1E6, symbol: "M"},
        {value: 1E9, symbol: "G"},
        {value: 1E12, symbol: "T"},
        {value: 1E15, symbol: "P"},
        {value: 1E18, symbol: "E"}
    ];
    const rx = /\.0+$|(\.[0-9]*[1-9])0+$/;

    let i;
    for (i = si.length - 1; i > 0; i--) {
        if (num >= si[i].value) {
            break;
        }
    }

    return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
}

function mbFormatter (value, unit) {
    const multiplier = 100;
    return Math.round(multiplier * value / (1024 * 1024)) / multiplier + unit;
}

function generateBacklinksStats(wid, check) {
    if (check === false || check.data === false || check.data === undefined) {
        return '';
    }

    const primaryBacklinksStats = [
        { data: 'backlinks', icon: 'ki-fasten', title: lajax.t("Total Backlinks")},
        { data: 'allbacklinks', icon: 'ki-exit-right-corner', title: lajax.t("Referring Domains")},
    ]
    const otherBacklinkStats = [
        { data: 'nofollow_backlinks', icon: 'ki-disconnect', title: lajax.t("Nofollow Backlinks")},
        { data: 'dofollow_backlinks', icon: 'ki-exit-right-corner opacity-0', title: lajax.t("Dofollow Backlinks"), icon2: '<i class="ki-duotone ki-abstract-49 text-gray-600 fs-2x ms-n1 position-absolute"><span class="path1"></span><span class="path2"></span><span class="path3"></span></i>'},
        { data: 'edu_backlinks', icon: 'ki-teacher', title: lajax.t("Edu Backlinks")},
        { data: 'gov_backlinks', icon: 'ki-flag', title: lajax.t("Gov Backlinks")},
        { data: 'ips', icon: 'ki-abstract-26', title: lajax.t("IPs")},
        { data: 'subnets', icon: 'ki-screen', title: lajax.t("Subnets")},
    ]

    let html = '<div class="backlink-summary avoid-break-inside "></div><div class="competitor-sizer">\
        <div class="row backlink-summary-down-stats avoid-break-inside mb-5 row-gap-3 row-gap-xl-5 gx-3 gx-xl-5">';
    for (const i in primaryBacklinksStats) {
        html+='<div class="col-12 col-sm-6 col-md-5 col-xxl-3 col-pdf-3">\
                    <div class="card h-lg-100">\
                        <div class="card-body d-flex justify-content-start align-items-start flex-column py-7 px-9 p-pdf-6">\
                            <div class="m-0">\
                                <i class="ki-duotone ' + primaryBacklinksStats[i].icon + ' fs-2hx text-gray-600">\
                                    <span class="path1"></span>\
                                    <span class="path2"></span>\
                                </i>\
                            </div>\
                            <div class="d-flex flex-column mt-6 mt-pdf-5">\
                                <span class="fw-semibold fs-2qx fs-pdf-1 text-gray-800 lh-1 ls-n2">' + nFormatter(check.data[primaryBacklinksStats[i].data], 1) + '</span>\
                                <div class="m-0 mt-2 text-wrap">\
                                    <span class="fw-semibold fs-6 fs-pdf-7 text-gray-500 card-tile-title">' + primaryBacklinksStats[i].title + '</span>\
                                </div>\
                            </div>\
                        </div>\
                    </div>\
                </div>';
    }
    html+='</div>';

    html+='<div class="row backlink-summary-down-stats avoid-break-inside row-gap-3 row-gap-xl-5 gx-3 gx-xl-5">';
    for (const i in otherBacklinkStats) {
        html+='<div class="col-12 col-sm-6 col-md-4 col-xxl-2 col-pdf-2">\
                    <div class="card h-lg-100">\
                        <div class="card-body d-flex justify-content-start align-items-start flex-column py-7 px-9 p-pdf-6 pb-pdf-5">\
                            <div class="m-0 pdf-hidden">' + (otherBacklinkStats[i].icon2 ? otherBacklinkStats[i].icon2 : '' ) + '\
                                <i class="ki-duotone ' + otherBacklinkStats[i].icon + ' fs-2hx text-gray-600">\
                                    <span class="path1"></span>\
                                    <span class="path2"></span>\
                                    <span class="path3"></span>\
                                    <span class="path4"></span>\
                                    <span class="path5"></span>\
                                </i>\
                            </div>\
                            <div class="d-flex flex-column mt-6 mt-pdf-0">\
                                <span class="fw-semibold fs-2qx fs-pdf-1 text-gray-800 lh-1 ls-n2">' + nFormatter(check.data[otherBacklinkStats[i].data], 1) + '</span>\
                                <div class="m-0 mt-2 text-wrap mt-pdf-1 lh-pdf-1_2">\
                                    <span class="fw-semibold fs-6 fs-pdf-7 text-gray-500 card-tile-title">' + otherBacklinkStats[i].title + '</span>\
                                </div>\
                            </div>\
                        </div>\
                    </div>\
                </div>';
    }
    html+='</div></div>';

    return wrapInButton(html, wid);
}

function generateTechnologiesList(wid, check) {
    if (check === false || check.data.length === 0) {
        return '';
    }

    let l = 0;
    let iconWidth = 8;
    let tableWidth = 66;

    if (isMobileRequest()) {
        tableWidth = 100;
        iconWidth = 12;
    }

    if (isPdfRequest()){
        iconWidth = 6;
    }

    let html = '<div class="avoid-break-before table-part" style="width:' + tableWidth + '%;"><table class="table table-row-dashed table-fixed"><thead><th style="width:' + iconWidth + '%; min-width: 24px;"></th><th>%technology%</th><th style="width:25%;">%version%</th></thead><tbody>'.strtr({
        '%technology%': lajax.t("Technology"),
        '%version%': lajax.t("Version")
    });

    for (const i in check.data) {
        const technology = check.data[i];

        if (divideTables && !isMobileRequest() && (l % 6 == 0) && (l > 0)) {
            html += '</tbody></table></div><div class="table-part" style="width:' + tableWidth + '%;"><table class="table table-row-dashed table-fixed"><tbody>';
        }

        html += '<tr><td class="text-left" style="width:' + iconWidth + '%;">';

        let iconProperty = 'icon';
        if (isPdfRequest()){
            iconProperty = 'icon_pdf';
        }

        if (technology[iconProperty] !== false) {
            if (isPdfRequest()) {
                html += '<i><img class="technologies-img" src="%icon%" onerror="this.style.display=\'none\'"></i>'.strtr({
                    '%icon%': technology[iconProperty]
                });
            } else {
                html += '<a href="%website%" target="_blank"><img class="technologies-img" src="%icon%" onerror="this.style.display=\'none\'"></a>'.strtr({
                    '%website%': technology.website,
                    '%icon%': technology[iconProperty]
                });
            }
        }

        html += '</td><td style="vertical-align: middle;">%name%</td><td style="vertical-align: middle; width:25%;" class="text-center;">%version%</td></tr>'.strtr({
            '%name%': technology.name,
            '%version%': technology.version
        });

        l++;
    }

    html += '</tbody></table></div>';

    return wrapInButton(html, wid);
}

function generateResourceList(check, wid = websiteId) {
    if (check === false || check.data.total === undefined) {
        return '';
    }

    const resourceList = [{
            class : 'ps-total-resources-image',
            value : Number(check.data.total),
            title : lajax.t("Total Objects"),
        },
        {
            class: 'ps-html-size-image',
            value: Number(check.data.html),
            title: lajax.t("Number of HTML Pages"),
        },
        {
            class: 'ps-js-resources-image',
            value: Number(check.data.js),
            title: lajax.t("Number of JS Resources"),
        },
        {
            class: 'ps-css-resources-image',
            value: Number(check.data.css),
            title: lajax.t("Number of CSS Resources"),
        },
        {
            class: 'ps-image-size-image',
            value: Number(check.data.images),
            title: lajax.t("Number of Images"),
        },
        {
            class: 'ps-static-resources-image',
            value: Number(check.data.other),
            title: lajax.t("Other Resources"),
        },
    ]

    const html = '<div class="resources-breakdown mt-8 mb-1">' + resourceList.reduce((accumHtml, item) => accumHtml +
        '<div class="activity-item" align="center">\
              <div class="item-image %class%"></div>\
              <div class="item-content">\
                  <p class="value-item">%value%</p>\
                  <p class="title-item mb-0">%title%</p>\
            </div>\
        </div>'.strtr({'%class%': item.class, '%value%': item.value, '%title%': item.title}), '') + '</div>';

    return wrapInButton(html, wid);
}

function generateInsightsTable(check, type, index) {
    let i;
    if ((check === false) || (check.data.length === 0)) {
        return '';
    }

    if (check.data['insights'].length === 0) {
        return '';
    }

    generatePageInsightsScoreResult(type, check.data['score'], index);

    const colors = [
        'var(--bs-success)', // green
        'var(--bs-orange)', // red
        'var(--bs-danger)', // red
    ];
    let html = '<div class="col-md-6 col-sm-12"><table class="table table-row-dashed table-fluid"><thead><tr><th>' + lajax.t('Lab Data') + '</th><th>' + lajax.t('Value') + '</th></tr></thead><tbody>';

    for (i in check.data['insights']) {
        let labDataValue = check.data['insights'][i]['value'];
        const score = parseFloat(check.data['insights'][i]['score']);
        const colorId = (score >= 0.9) ? 0 : (score >= 0.5) ? 1 : 2;

        if (check.data['insights'][i]['postfix']){
            labDataValue = labDataValue + ' ' + check.data['insights'][i]['postfix'];
        }

        html += '<tr><td>' + lajax.t(check.data['insights'][i]['name']) + '</td><td style="color:' + colors[colorId] + ';-webkit-text-fill-color:' + colors[colorId] + '">' + labDataValue + '</td></tr>'
    }

    html += '</tbody></table></div>';

    $('#' + type + 'PageInsightsTable' + index).show();

    html += '<div class="col-md-6 col-sm-12"><table class="table table-row-dashed table-fluid"><thead><tr><th>' + lajax.t('Opportunities') + '</th><th class="w-pdf-80px mw-pdf-80px">' + lajax.t('Estimated Savings') + '</th></tr></thead><tbody>';

    for (i in check.data['opportunities']) {
        const score = parseFloat(check.data['opportunities'][i]['score']);
        const colorId = (score >= 0.9) ? 0 : (score >= 0.5) ? 1 : 2;

        html += '<tr><td>' + lajax.t(check.data['opportunities'][i]['name']) + '</td ><td style="color:' + colors[colorId] + ';-webkit-text-fill-color:' + colors[colorId] + '">' + check.data['opportunities'][i]['value'] + ' s</td></tr>';
    }

    html += '</tbody></table></div>';
    $('#desktopPageInsights'+index +' .website1').first().hide();
    $('#desktopPageInsights'+index +' .website1').last().hide();
    return html;
}

function backlinkSummaryScore(currentWid, title, type, value) {
    const $field = $('#backlinks' + currentWid + ' .field-details').find('.backlink-summary').eq(0);
    const defaultSize = isPdfRequest() ? 150 : 128;
    const size = currentWid === websiteId ? defaultSize : Math.round(defaultSize * 0.82);
    const className = 'backlink-' + type + '-score-' + currentWid;
    const colors = [
        'success', // green
        'warning', // orange
        'danger', // red
    ];

    let colorKey = 0;
    if (value <= 24) {
        colorKey = 2;
    } else if (value >= 25 && value <= 49) {
        colorKey = 1;
    }

    const colorId = colors[colorKey];

    const item = $('<div class="backlink-summary-score-item d-inline-block" style="width:' + size + 'px">\
            <div style="width: ' + size + 'px" class="text-center ' + className + '" data-width="' + size + '" data-height="' + size + '" data-fgColor="' + colorId +  '" data-font-size="20px"></div>\
            <p class="score_name" style="width:' + size + 'px">' + title + '</p>\
        </div>');

    $field.attr('align', 'center').addClass('backlink-summary-score d-inline-block').append(item);

    const $element = $field.find('.' + className);

    $element
        .attr('data-label', value)
        .attr('data-value', value)
        .attr('data-color', colorId)
        .css('visibility', 'visible')
        .css('color', colorId)
        .css('-webkit-text-fill-color', colorId);

    setTimeout(function() {
        ScoreCharts.init($element);
    }, 150);
}

function generateBacklinkSummary(currentWid, backlinks) {
    if (backlinks === false || backlinks.data === false || backlinks.data === undefined) {
        return '';
    }

    const domainStrength = (backlinks.data.domain_authority !== null && backlinks.data.domain_authority !== undefined) ? backlinks.data.domain_authority : backlinks.data.mozda;
    const pageAuthority = backlinks.data.page_strength;

    backlinkSummaryScore(currentWid, lajax.t('Domain Strength').replace(' ', '<br/>'), 'domain', domainStrength);
    backlinkSummaryScore(currentWid, lajax.t('Page Strength').replace(' ', '<br/>'), 'page', pageAuthority);
}

function generatePageInsightsScoreResult(type, totalScore, index) {
    const colors = [
        'success', // green
        'warning', // orange
        'danger', // red
    ];

    if (totalScore === undefined) {
        totalScore = 0;
    }

    const colorId = colors[(totalScore >= 90) ? 0 : (totalScore >= 50) ? 1 : 2];
    const $scoreGraph = $('#' + type + 'PageInsights' + index + '  .graph-container');

    const size = index === websiteId ? KTUtil.getCssVariableValue('--pagespeed-chart-size') : KTUtil.getCssVariableValue('--pagespeed-chart-competitor-size');
    const className = type + '-insight-score-' + index;
    const $element = $('<div class="text-center ' + className + '" data-width="' + size + '" data-height="' + size + '" data-fgColor="' + colorId + (index === websiteId ? '' : '" data-font-size="20px') + '"></div>');

    $scoreGraph.attr('align', 'center').append($element);
    $element
         .attr('data-label', totalScore)
         .attr('data-value', totalScore)
         .attr('data-color', colorId)
         .css('visibility', 'visible')
         .css('color', colorId)
         .css('-webkit-text-fill-color', colorId);

    $scoreGraph.show();

    setTimeout(function() {
        ScoreCharts.init($element);
        //setTimeout(function() {
            //$element.find('svg').removeAttr('width');
            //$element.find('svg').removeAttr('viewBox');
            //$element.find('svg').removeAttr('transform');
            //$element.find('svg').css('width', '100%');
        //}, 150);
    }, 150*2);

}

function percentage(num, per) {
    return (num / 100) * per;
}

function generateJavascriptErrorsList(check) {
    if ((check === false) || (check.data.length === 0)) {
        return '';
    }

    let html = '<div class="table-responsive table-part"><table class="table table-row-dashed table-fluid"><tbody>';
    html += '<thead><tr><th>' + lajax.t('Error Output') + '</th></tr></thead>';
    for (const i in check.data) {
        const text = check.data[i].text;
        html += '<tr><td>%text%</td></tr>'.strtr({
            '%text%': text,
        });
    }

    html += '</tbody></table></div>';
    return wrapInButton(html);
}

function generateOptimisedImages(check) {
    if (check === false || check.data.length == 0) {
        return '';
    }

    let html = '';
    html += '\
            <div class="table-responsive table-part">\
                <table class="table table-row-dashed table-fluid table-wrapped">\
                <thead><tr>\
                    <th>' + lajax.t("Image") + '</th>\
                    <th style="width:14%;">' + lajax.t("Save Size") + '</th>\
                    <th style="width:14%;">' + lajax.t("Save Percentage") + '</th>\
                </tr></thead>\
                <tbody>';

    let i = 0;

    for (const l in check.data) {
        const link = check.data[l];

        if (divideTables && !isMobileRequest() && (i % 6 == 0) && (i > 0)) {
            html += '</tbody></table></div><div class="table-responsive table-part"><table class="table table-row-dashed table-fluid"><tbody>';
        }

        html += '<tr><td style="word-break: break-all;">' + link[0] + '</td><td style="width:14%;">' + link[1] + '</td><td style="width:14%;">' + link[2] + '</td></tr>';

        i++;
    }

    html += '</tbody></table></div>';

    return wrapInButton(html);
}

function generateFlashList(check) {
    if (check === false || check.data === null || check.data.length == 0) {
        return '';
    }

    let html = '';
    html += '\
        <div class="table-responsive table-part">\
            <table class="table table-row-dashed table-fluid">\
            <thead>\
                <tr><th>' + lajax.t("HTML Block") + '</th></tr>\
            </thead>\
            <tbody>';

    for (const l in check.data) {
        html += '<tr><td style="word-break: break-all;">' + check.data[l].html + '</td></tr>';
    }

    html += '</tbody></table></div>';

    return wrapInButton(html);
}

function generateTapTargetSizing(check) {
    if (check === false || check.data.length == 0) {
        return '';
    }

    let html = '';
    html += '\
        <div class="table-responsive table-part">\
            <table class="table table-row-dashed table-fluid">\
            <thead>\
                <tr><th>' + lajax.t("Element&nbsp;Label") + '</th><th>' + lajax.t("CSS Selector") + '</th><th>' + lajax.t("HTML Block") + '</th></tr>\
            </thead>\
            <tbody>';

    for (const l in check.data) {
        const link = check.data[l];
        html += '<tr><td style="">' + link[0] + '</td><td style="word-break: break-all;">' + link[1] + '</td><td style="word-break: break-all;">' + link[2] + '</td></tr>';
    }

    html += '</tbody></table></div>';

    return wrapInButton(html);
}

function generateLegibleFontsizes(check) {
    if (check === false || check.data.length == 0) {
        return '';
    }

    let html = '';
    html += '\
        <div class="table-responsive avoid-break-inside">\
            <table class="table table-row-dashed table-fluid">\
            <thead>\
                <tr><th>' + lajax.t("Font Size") + '</th><th>' + lajax.t("Text Block") + '</th><th>' + lajax.t("Style Location") + '</th></tr>\
            </thead>\
            <tbody>';

    for (const l in check.data) {
        const link = check.data[l];
        html += '<tr><td style="word-break: break-all;">' + link[0] + '</td><td style="word-break: break-all;">' + link[1] + '</td><td style="word-break: break-all;">' + link[2] + '</td></tr>';
    }

    html += '</tbody></table></div>';

    return wrapInButton(html);
}

function generateCoreWebVitalsCharts(currentWid, check, mainSelector) {
    let chartData;
    if (check === false) {
        return false;
    }

    if (check.data.length === 0) {
        return false;
    }

    let chartsContainer = $(mainSelector).find('.charts-container');
    chartsContainer.show();
    chartsContainer[0].outerHTML = wrapInButton(chartsContainer[0].outerHTML, currentWid);
    chartsContainer = $(mainSelector).find('.charts-container'); // refresh
    if (currentWid !== websiteId){
        chartsContainer.addClass('competitor-charts-container');
    }

    let canvasContainer = chartsContainer.find('#graph-largest-contentful-paint').attr('id', 'graph-largest-contentful-paint-' + currentWid);
    const width = (currentWid === websiteId) ? 330 : 300;

    if (!Array.isArray(check.data['largest-contentful-paint'])){
        chartData = check.data['largest-contentful-paint'];
        drawMeterChart(canvasContainer, chartData['min'], chartData['max'], chartData['value'], chartData['ranges'], chartData['unit'], chartData['precision'], chartData['precision'], currentWid, width, 1);
    } else {
        canvasContainer.closest('.js-web-vitals-details').remove();
    }

    canvasContainer = chartsContainer.find('#graph-interaction-to-next-paint').attr('id', 'graph-interaction-to-next-paint-' + currentWid);
    if (!Array.isArray(check.data['interaction-to-next-paint'])) {
        chartData = check.data['interaction-to-next-paint'];
        drawMeterChart(canvasContainer, chartData['min'], chartData['max'], chartData['value'], chartData['ranges'], chartData['unit'], chartData['precision'], chartData['precision'], currentWid, width, 0);
    } else {
        canvasContainer.closest('.js-web-vitals-details').remove();
    }

    canvasContainer = chartsContainer.find('#graph-cumulative-layout-shift').attr('id', 'graph-cumulative-layout-shift-' + currentWid);
    if (!Array.isArray(check.data['cumulative-layout-shift'])){
        chartData = check.data['cumulative-layout-shift'];
        drawMeterChart(canvasContainer, chartData['min'], chartData['max'], chartData['value'], chartData['ranges'], ' ', chartData['precision'], chartData['precision'], currentWid, width, 2);
    } else {
        canvasContainer.closest('.js-web-vitals-details').remove();
    }

    return true;
}

function drawMeterChart(element, min, max, value, ranges, unit, scaleDecimals, valueDecimals, wid, width, decimal) {
    element.attr('width', width);
    element.css({
        'width' : width + 'px'
    });
    element.attr('height', parseInt(width * 0.624));

    const labels = [
            [' ', 0],
            [ranges[1][0], ranges[1][0]],
            [ranges[1][1], ranges[1][1]],
            [' ', max],
        ];
    MeterGraphs.add(element.attr('id'), wid, width, labels, value, max, unit, decimal);
}

function generateSpeedCharts(wid, check) {
    if (check !== false) {
        const selector = 'serverResponseTime' + wid;
        const width = wid === websiteId ? 330 : 300;

        $('#' + selector + ' .speed-first-byte').attr('width', width)
            .attr('height', parseInt(width * 0.624))
            .attr('id', selector + 'speed-first-byte')
            .css({'width' : width + 'px'});
        $('#' + selector + ' .speed-on-load').attr('width', width)
            .attr('height', parseInt(width * 0.624))
            .attr('id', selector + 'speed-on-load')
            .css({'width' : width + 'px'});
        $('#' + selector + ' .speed-last-byte').attr('width', width)
            .attr('height', parseInt(width * 0.624))
            .attr('id', selector + 'speed-last-byte')
            .css({'width' : width + 'px'});

        let labels = [
            [' ', 0, '#999999'],
            ['0.5s', 0.5, '#999999'],
            ['1s', 1, '#999999'],
            [' ', 3, '#999999'],
        ];
        MeterGraphs.add(selector + 'speed-first-byte', wid, width, labels, Math.round(check.data.responseTime / 10) / 100, 3, 's')

        labels = [
            [' ', 0],
            ['5s', 5],
            ['10s', 10],
            [' ', 20]
        ];
        MeterGraphs.add(selector + 'speed-on-load', wid, width, labels, Math.round(check.data.loadTime / 100) / 10, 20, 's')

        labels = [
            [' ', 0],
            ['10s', 10],
            ['15s', 15],
            [' ', 20]
        ];
        MeterGraphs.add(selector + 'speed-last-byte', wid, width, labels, Math.round(check.data.completeTime / 100) / 10, 20, 's')
    }
}

// Download Page Size
function generateSizeCharts(wid, check) {
    if (check === false) {
        return false;
    }

    const selector = check.name + wid;
    const width = (wid === websiteId) ? 370 : 330;

    $('#'+selector + ' .total-page-size').attr('width', width)
        .attr('height', parseInt(width * 0.624))
        .attr('id', selector + 'total-page-size')
        .css({'width' : width + 'px'});

    $('#'+selector + ' .page-size-breakdown').attr('width', width)
        .attr('height', parseInt(width * 0.737))
        .attr('id', selector + 'page-size-breakdown');

    // 'Download Page Size'
    const labels = [
        [' ', 0],
        ['', 3], // instead '3MB' - fix the numbers run into each other
        ['5MB', 5],
        [' ', 20],
    ];
    MeterGraphs.add(selector + 'total-page-size', wid, width, labels, Math.round(100 * check.data.total / (1024 * 1024)) / 100, 20, 'MB', 2)

    // 'Download Page Size Breakdown'
    const colors = ['danger', 'cyan', 'success', 'primary', 'gray-400'];

    const sizeDonutData = [
        {
            data: check.data.html,
            label: 'HTML',
        },
        {
            data: check.data.css,
            label: 'CSS',
        },
        {
            data: check.data.js,
            label: 'JS',
        },
        {
            data: check.data.image,
            label: lajax.t('Images'),
        },
        {
            data: check.data.other,
            label: lajax.t('Other'),
        },
    ]
    setTimeout(function() {
        DonutChart.init(wid, selector, 'page-size-breakdown', sizeDonutData, colors, check.data.total, 'MB');
    }, 250);

    return true;
}

function roundRect(ctx, x, y, width, height) {
    const radius = height / 2;

    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + width - radius, y);
    ctx.arc(x + width - radius, y + radius, radius, -Math.PI/2, Math.PI/2, false);
    ctx.lineTo(x + radius, y + height);
    ctx.arc(x + radius, y+radius, radius, Math.PI/2, 3*Math.PI/2, false);
    ctx.closePath();
    ctx.fill();
}

function generateTransferSizeChartsContainer(wid, check) {
    const html = '<div class="row mb-4 avoid-break-inside ' + (wid === websiteId  ? '' : 'competitor-charts-container') + '">\
            <div class="col-12 col-xl-6">\
                <div class="avoid-break-inside text-center d-flex flex-wrap flex-center">\
                    <div class="fs-2 fs-pdf-4 my-5 text-center w-100">' + lajax.t('Compression Rate') + '</div>\
                     <div class="position-relative canvas-label">\
                        <div class="position-absolute translate-middle start-50 top-50 d-flex flex-column flex-center">\
                            <span class="fw-bolder text-gray-700"></span>\
                        </div>\
                        <canvas class="compression-page-size' + (wid === websiteId ? ' mt-n15': '') + '" width="100" height="281"></canvas>\
                    </div>\
                </div>\
            </div>\
            <div class="' + (wid === websiteId ? 'col-11' : 'col-12') + ' col-sm-10 offset-sm-1 col-xl-6 offset-xl-0">\
                <div class="avoid-break-inside d-flex flex-column compression-rates">\
                    <div class="fs-2 fs-pdf-4 my-5 text-center">' + lajax.t('Compression Rates') + '</div>\
                    <div class="compression-percentage2" width="100" height="250"></div>\
                </div>\
            </div>\
        </div>';

    return wrapInButton(html, wid);
}

// Website Compression (Gzip, Deflate, Brotli)
function generateTransferSizeCharts(wid, check) {
    if (check === false) {
        return false;
    }

    const selector = check.name + wid;
    const width = wid === websiteId ? 370 : 330;
    $('#'+selector + ' .compression-page-size').attr('width', width)
        .attr('height', parseInt(width * 0.624))
        .attr('id', selector + 'compression-page-size')

    // 'Compression Page Size'
    const ranges = [
        ['', 0],
        ['66%', 33],
        ['33%', 66], // instead '33%' - fix the numbers run into each other
        ['', 100],
    ];
    MeterGraphs.add(selector + 'compression-page-size', wid, width, ranges, Math.round(check.data.rate.total), 100, '%');

    const labels = {
        "html": 'HTML',
        "css": 'CSS',
        "js": 'JS',
        "image": lajax.t('Images'),
        "other": lajax.t('Other'),
        "total": lajax.t('Total')
    };
    const colors = ['danger', 'cyan', 'success', 'primary', 'gray-400', 'info'];


    // use uncompressed for Compression Rates
    $.each(labels, function (index) {
        if (check.data.rate[index] !== 0) {
            check.data[index] = check.data[index] * 100 / check.data.rate[index];
        }
    });

    check.data.total = check.data.html + check.data.css + check.data.js + check.data.image + check.data.other;

    let i = 0;
    const elem =  $('#' + selector + ' .compression-percentage2');

    $.each(labels, function (index) {
        if (check.data[index] !== 0) {
            const progress = check.data.rate[index];
            elem.append('<div class="d-flex flex-stack flex-wrap flex-sm-nowrap ' + (wid === websiteId ? 'fs-7' : 'fs-8') + '">                 \n' +
                '                <div class="d-flex align-items-center me-3">\n' +
                '                    <div class="min-w-65px">\n' +
                '                        <span class="' + (index === 'total' ? 'text-gray-700 fw-bolder' : 'text-gray-500 fw-semibold') + ' d-block ' + (wid === websiteId ? 'fs-7' : 'fs-8') + '">' + this + '</span>\n' +
                '                    </div>                   \n' +
                '                </div>                   \n' +
                '                <div class="d-flex align-items-center flex-grow-1 pe-0 pe-xxl-2">  \n' +
                '                    <div class="progress ' + (wid === websiteId ? 'h-10px' : 'h-8px') + ' w-100 me-2' + ((index !== 'other') ? (' bg-light-' + colors[i] + '">\n') : ('" style="background-color: rgba(var(--bs-gray-400-rgb), 0.2);">'))  + // make pseudo light color for gray-400 (other)
                '                        <div class="progress-bar bg-' + colors[i] + '" role="progressbar" style="width: ' + progress + '%" aria-valuenow="' + progress + '" aria-valuemin="0" aria-valuemax="100"></div>\n' +
                '                    </div>\n' +
                '                </div>\n' +
                '                <div class="' + (index === 'total' ? 'text-gray-700 fw-bolder' : 'text-gray-500 fw-semibold') + ' ' + (wid === websiteId ? 'fs-7 fs-pdf-8' : 'fs-8 fs-pdf-9') + ' text-end text-sm-left w-100 w-sm-unset me-2 me-sm-0 text-nowrap ' + (wid === websiteId ? 'min-w-180px min-w-lg-200px min-w-pdf-250px' : 'min-w-150px min-w-lg-175px min-w-pdf-220px') + '">\n' +
                '                    <span class="text-gray-700 fw-bolder">' + (100 - progress) + '% '+ '</span>\n' +
                '                    ' + lajax.t('compressed of') + ' ' + (Math.round(100 * check.data[index] / (1024 * 1024)) / 100).toFixed(2) + 'MB' +
                '                </div>\n' +
                '            </div>');
            if (index !== 'total') {
                elem.append('<div class="separator separator-dashed my-2 my-sm-3"></div>');
            }
        }
        i++;
    });

    elem.wrapInner('<div class="d-flex mw-450px flex-column mx-auto"></div>');

    return true;
}

function generateTagsTable(check) {
    if (check === false || check.data.length == 0) {
        return '';
    }
    let html = '\
        <div class="table-responsive table-part"><table class="table table-row-dashed table-fluid">\
            <thead>\
                <th class="min-w-sm-150px">' + lajax.t("Tag") + '</th>\
                <th>' + lajax.t("Content") + '</th>\
            </thead>\
            <tbody>';

    for (const name in check.data) {
        const content = check.data[name];
        html += '<tr><td>' + name + '</td><td>' + content + '</td></tr>';
    }
    html += '</tbody></table></div>';

    return wrapInButton(html);
}

function generateFacebookPixels(check) {
    if (check === false || check.data.length == 0 || check.data === false) {
        return '';
    }
    let html = '\
        <br /><table class="table table-row-dashed table-fluid mb-0 mt-3" style="width:50%;">\
            <thead><tr>\
                <th>' + lajax.t("Pixel ID") + '</th>\
            </tr></thead>\
            <tbody>';
    for (const l in check.data) {
        html += '\
            <tr>\
                <td>' + check.data[l] + '</td>\
            </tr>';
    }
    html += '</tbody></table>';

    return html;
}

function highlightTarget() {
    if (targetKeyword === '') {
        return;
    }
    $('.highlight-target').each(function () {
        const text = $(this).text().replace(targetKeywordRegexp, '<span class="highlighted-keyword">$1</span>');
        $(this).html(text).removeClass('highlight-target');
    });
    // highlight with no spaces
    const reg = new RegExp('(' + escapeRegExp(targetKeyword.replace(' ', '')) + ')', 'gi');
    $('.highlight-target2').each(function () {
        const text = $(this).text().replace(reg, '<span class="highlighted-keyword">$1</span>');
        $(this).html(text).removeClass('highlight-target2');
    });
}

// checkUrls generates in ReportAsset
function getChecksResult(wid, requestName, callback, syncCallback) {
    if (undefined === checkUrls[requestName].message){
        currentProgressAction = defaultProgressActionTitle;
    } else {
        currentProgressAction = checkUrls[requestName].message;
    }
    currentProgressActions[requestName] = currentProgressAction;
    let templateId = 0;
    if (window.template !== undefined){
        templateId = window.template;
    }


    let animSpeed = 400;
    // container width calculation fix
    if (isPdfRequest()){
        animSpeed = 0;
    }


    $.post({
        'url': checkUrls[requestName].url,
        'data': {
            'wid': wid,
            'template': templateId,
            'keyword': targetKeyword,
            '_csrf': csrfToken + csrfFunction(wid.toString())
        },
        'headers': {
            'userId': userId
        },
        'success': function (response) {
           // remove completed request action
           delete currentProgressActions[requestName];
           currentProgressActionsKeys = Object.keys(currentProgressActions);
           currentProgressAction = currentProgressActions[currentProgressActionsKeys[Math.floor(Math.random()*currentProgressActionsKeys.length)]];
           updateProgressBar();

           // parse each check
           $.each(response.results, function (i, check) {
               // skip empty check
               if ((check === false) || (check.passed === undefined)) {
                   return;
               }

               let icon = 'bi bi-info';
               if (check.passed === true) {
                   icon = 'text-success ki-check';
               } else if (check.passed === false) {
                   icon = 'ki-cross text-danger';
               }
               icon += (wid === websiteId) ? ' mt-n4' : '';

               const $checkContainer = $("#" + check.name + wid); // <div class='faq-box' id='topKeywordRankings79459'>
               const $checkPanel = $checkContainer.closest('.portlet');
               //show result and parent section like 'Rankings'
               const $sectionContainer = $checkContainer
                   .find(".field-value")
                   .html(check.answer)
                   .closest('.faq-box')
                   .fadeIn(animSpeed)
                   .closest('.container-check');

               const isSectionOpened = $sectionContainer.is(':visible');

               if (wid === websiteId){
                   $sectionContainer.show(animSpeed, function(){
                       if (syncCallback !== undefined) {
                           syncCallback(i, check, wid);
                       }
                   });
               } else {
                   $sectionContainer.show();

                   if (syncCallback !== undefined) {
                       syncCallback(i, check, wid);
                   }

                   if (!isSectionOpened){
                       $sectionContainer.hide();
                   }
               }

               if ((check.append2 !== undefined) && (check.append2 != '')) {
                   $checkContainer.find(".field-value").append('<div class="append2">' + check.append2 + '</div>');
               }

               $checkContainer.find(".bg-icon i").addClass(icon);

               // show check info
               if (wid === websiteId){
                   showCheckInfo(check, $checkContainer);
               } else {
                   // update competitor total score
                   updateScore('website' + wid, check);
                   return;
               }

               $checkPanel.show(); //subsection
               $checkContainer.closest('.check-group').fadeIn(animSpeed);
               const $headerPlace = $checkPanel.find('.js-header-place:visible:first');

               if (isPdfRequest() && ($headerPlace.length !== 0)){
                    // wkhtmltopdf/chrome page breaking header hack
                    // replace heading into avoid-breaking container if exists
                    $checkPanel.find('.js-header-container').addClass('card-header-inside').insertAfter($headerPlace);
               }
               displayRecommendation(check, wid);
               if (typeof scoreGrades !== 'undefined') {
                   updateScore(check.section, check);
                   updateScore('website', check);
               }
           });

           // user's functions
           if (callback !== undefined) {
               callback(response.results, wid);
           }
       }
    }).fail(function(response) {
        // do nothing on fail and skip user's callback
        updateProgressBar();
        // other HTML related checks
        if (requestName == "html") {
            updateProgressBar();
            updateProgressBar();
            updateProgressBar();
        }
        if ((response.responseJSON != undefined) && (response.responseJSON.status === 404)) {
            $('.js-ajax-alert')
                .removeClass('d-none')
                .find('.alert-message')
                .html(response.responseJSON.message);
        }
        // Show error on fatal error
        if (response.status === 500) {
            $('.js-ajax-alert')
                .removeClass('d-none')
                .find('.alert-message')
                .html(lajax.t('Very large or invalid page (often due to a spam website). Cannot be assessed.'));
        }
        return false;
    });
}

function showCheckInfo(check, $container) {
    let showExpand = false;
    const $checkInfo = $container.find('.check-info');

    if (check['what'] !== undefined && (check['what'] != '')) {
        $checkInfo.append('<p class="what">' + check['what'] + '</p>');
        showExpand = true;
    }

    if (check['how'] !== undefined && (check['how'] != '')) {
        $checkInfo.append('<p class="how">' + check['how'] + '</p>');
        showExpand = true;
    }

    if (check['more-info'] !== undefined && (check['more-info'] != '')) {
        if (!isAgency){
            $checkInfo.append('<p class="more-info"><a href="' + check['more-info'] + '" target="_blank">' + lajax.t('Learn more in our guide') + '</a></p>');
            showExpand = true;
        }
    }

    if (showExpand) {
        $container.addClass('expandable');
    }

    return true;
}

function updateProgressBar() {
    requestsCompleted++;
    progress = Math.round(95 * (requestsCompleted / requestsTotal) + 5);
    if (progress > progressPercentsDone) {
        progressPercentsDone = progress;
    }
    progressPercentsDone = Math.min(progressPercentsDone, 99);
    if (currentProgressAction === undefined) {
        currentProgressAction = lajax.t('Finalizing Results');
    }

    if (requestsCompleted == requestsTotal) {
        $(window).trigger('resize');
        $('.progress-bar-container .progress-bar').css('width', '100%');
        $('.progress-fill').html(lajax.t('Finalizing Results') + " - 100" + lajax.t("% Complete"));
        setTimeout(function () {
            $('#progress-bar-loading').animate({
                opacity: '0'
            }, 'slow', function(bar){
                $('#progress-bar-loading').hide();
                setTimeout(function() {
                    const foo = document.createElement('div');
                    foo.id = 'pdfready';
                    document.body.appendChild(foo);
                }, 2500);
            });
        }, 2000);
    }
}

function displayRecommendation(check, wid) {

    if ((check.recommendation === null) || (check.recommendation === undefined) || (check.recommendation === '')) {
        return false;
    }

    const container = $("#recommendations");
    let priority = '<span class="badge py-2 px-3 fs-7 badge-light-danger fs-pdf-7">' + lajax.t("High Priority") + '</span>';
    const item = $(".recommendation-item-template", container).clone().removeClass("recommendation-item-template").addClass("recommendation-item");

    if (check.maxScore - check.score <= 2) {
        priority = '<span class="badge py-2 px-3 fs-7 badge-light-success fs-pdf-7">'+lajax.t("Low Priority")+'</span>';
    } else if (check.maxScore - check.score <= 5) {
        priority = '<span class="badge py-2 px-3 fs-7 badge-light-warning fs-pdf-7">'+lajax.t("Medium Priority")+'</span>';
    }

    // add new recommendation
    item.data("pass", Number(check.passed));
    item.data("maxscore", check.maxScore);
    item.data("score", check.score);
    item.data("category", getSectionName(check.section));
    item.data("sortScore", check.maxScore - check.score);

    $(".recommendation-category", item).text(getSectionName(check.section));
    $("a", item).attr('href', '#' + check.name + wid);
    $(".recommendation-title", item).text(check.recommendation);
    $(".recommendation-priority", item).html(priority);
    // @todo probably outdated
    $(".recommendation-what", item).text(check.what);
    $(".recommendation-why", item).text(check.why);
    $(".recommendation-how", item).text(check.how);
    item.attr('data-sort-score', item.data("sortScore"));
    container.append(item);

    //sort recommendations by priority
    container
        .children(".recommendation-item")
        .sort(function (a, b) {
            return $(a).data("sortScore") > $(b).data("sortScore") ? -1 : 1;
        })
        .appendTo(container);

    $(".recommendation-item.row-hidden", container).fadeIn().removeClass("row-hidden");

    const recommendationCount = $("#recommendations .recommendation-item").length;

    if (recommendationCount > 0) {
        $('.recommendation-btn-block').show();
        $('#recommendation_count').html(recommendationCount);
        $('.tab-recommendations').show();
        return true;
    }

    $('.recommendation-btn-block').hide();
    return false;
}

function getSectionName(section) {
    if (section in sections){
        return sections[section];
    }

    return lajax.t("Other");
}

function updateScore(section, check) {
    if (window.quick_group === undefined) {
        $('.' + section + '-hidden').show(); //show header section

        // skip unscorable checks (with maxScore = 0)
        if (check.maxScore === 0 || check.maxScore === undefined) {
            return false;
        }

        $('.' + section + '-score-hidden').show(); //show score section

        let percentage;
        let messages;

        if (scores[section] === undefined) {
            scores[section] = {
                'score': 0,
                'max': 0
            };
        }

        scores[section].max += check.maxScore;
        scores[section].score += check.score;

        percentage = Math.round(100 * scores[section].score / scores[section].max);
        percentage = (percentage > 100) ? 100 : percentage; // limit to 100%
        // scaling
        // "To explain, even if a website is terrible, it often still scores something like 50 or 60 out of 100 in our reporting.
        // I think our grading bracked (like F) account for this, so most of the higher grades are clustered above 60,
        // but the scoring chart itself would look strange if user received F but the circle was populated 60%, and customers eventually pointed this out."
        const scaled = Math.max(Math.round(100 - ((100 - percentage) * 1.5)), 0);

        $(".knob." + section + "-score")
            .attr('data-label', scoringType ? scaled : calculateGrade(scaled))
            .attr('data-value', scaled)
            .css('visibility', 'visible');
        ScoreCharts.update(".knob." + section + "-score.main-score");
        setTimeout(function() {
            ScoreCharts.update(".knob." + section + "-score.check-score");
        }, 150);
        messages = scoreMessage(section, scaled);
        $('.' + section + '-score-message').text(messages.title);

        if (messages.description !== undefined) {
            $('.' + section + '-score-description').text(messages.description);
        }
        setTimeout(function() {
            RadarChart.init();
        }, 150);
    }
}

function calculateGrade(percentage) {
    let grade = 'F';
    for (const minScore in scoreGrades) {
        if (percentage >= minScore) {
            grade = scoreGrades[minScore];
        }
    }
    return grade;
}

function scoreMessage(section, score) {
    if (scoreMessages[section] === undefined) {
        return '';
    }
    const minScores = Object.keys(scoreMessages[section]).sort().reverse();
    for (const i in minScores) {
        if (score >= minScores[i]){
            return scoreMessages[section][minScores[i]];
        }
    }
}

function showMore(block){
    $('.btn-show-'+block).hide('slow');
    $('.'+block).show('slow');
    $('.btn-hide-'+block).show('slow');
}

function hideMore(block){
    $('.'+block).hide('slow');
    $('.btn-hide-'+block).hide('slow');
    $('.btn-show-'+block).show('slow');
    const destination = $('#' + block).offset().top;
    $('body,html').animate({
        scrollTop: destination + 50
    }, 1500);
}

function reInitDetailsButtons() {
    $('.js-collapse-in').off('click');
    $('.js-collapse-out').off('click');

    $('.js-collapse-in').on('click',function(event){
        event.stopPropagation();
        const $expander = $(this);
        const $container = $expander.closest('.js-collapse-parent');
        $expander.slideUp();
        $container.find('.js-collapse-target').slideDown(500,function(){
        });
    });
    $('.js-collapse-out').on('click',function(event){
        event.stopPropagation();
        const $collapser = $(this);
        const $container = $collapser.closest('.js-collapse-parent');
        const $expander = $container.find('.js-collapse-in');
        $container.find('.js-collapse-target').slideUp(500,function(){
            $expander.slideDown();
        });
        const top = $container.find('.js-collapse-target').offset().top;
        const v_top = $(document).scrollTop();

        const v_bottom = $(document).scrollTop() + $(window).height();
        if( !(top >= v_top && top <= v_bottom) ){
            $("html, body").stop().animate({
                scrollTop: top - ($(window).height()/2)
            }, 500);
        }
    });

    // specific alternate
    $('body')
        .off('click','.js-visible-in')
        .off('click','.js-visible-out')
        .on('click','.js-visible-in',function(){
            const $expander = $(this);
            const $container = $expander.closest('.js-visible-parent');
            $expander.slideUp();
            $container.find('.js-visible-target').css({
                'visibility' : 'visible',
                'height': 'auto',
                'overflow': 'visible',
                'display': 'none'
            }).slideDown(500, function(){
                $(this).css({
                    'visibility' : 'visible',
                    'height': 'auto',
                    'overflow': 'visible'
                });

            });
        })
        .on('click','.js-visible-out',function(){
            const $collapser = $(this);
            const $container = $collapser.closest('.js-visible-parent');
            const $expander = $container.find('.js-visible-in');
            $container.find('.js-visible-target').slideUp(500,function(){
                $(this).css({
                    'visibility': 'hidden',
                    'display': 'block',
                    'height': '0',
                    'overflow': 'hidden'
                });
                $expander.slideDown();
            });
            const top = $container.find('.js-visible-target').offset().top;
            const v_top = $(document).scrollTop();
            const v_bottom = $(document).scrollTop() + $(window).height();

            if( !(top >= v_top && top <= v_bottom) ){
                $("html, body").stop().animate({
                    scrollTop: top - ($(window).height()/2)
                }, 500);
            }
        });

    // prevent hide info box on more link click
    $('.check-info .more-info').on('click', function (event){
        event.stopPropagation();
        return true;
    });

    // prevent expand info box Trial SignUp link click
    $('.btn-report-signup').on('click', function (event) {
        event.stopPropagation();
        return true;
    });
}

/**
 *
 * @param {String} html
 * @returns {String}
 */
function wrapInButton(html, wid) {
    let result;
    if (html == '') {
        return '';
    }

    if (isPdfRequest()) {
        result = '<div class="answer headers field-value-table">' + html + '</div>';
    } else {
        result = '' +
            '<div class="js-collapse-parent">\n' +
            '   <a class="btn btn-light btn-sm js-collapse-in">'+lajax.t("Show Details")+'</a>\n' +
            '   <div class="js-collapse-target collapse">\n' +
            '       <div class="answer headers field-value-table">' + html + '</div>\n' +
            '       <a class="btn btn-light btn-sm js-collapse-out mt-3">'+lajax.t("Hide Details")+'</a>\n' +
            '   </div>\n' +
            '</div>';
    }

    if (wid === undefined) {
        return result;
    }
    if (wid === websiteId) {
        return html;
    }
    return '<div class="field-details">' + result + '</div>';
}

/**
 *
 * @param replacePairs
 * @returns {string}
 */
String.prototype.strtr = function (replacePairs) {
    "use strict";
    let str = this.toString(), key, re;
    for (key in replacePairs) {
        if (replacePairs.hasOwnProperty(key)) {
            re = new RegExp(key, "g");
            str = str.replace(re, replacePairs[key]);
        }
    }
    return str;
};

function isOldPdfRequest() {
    // Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.34 (KHTML, like Gecko) wkhtmltopdf Safari/534.34
    return (navigator.userAgent.indexOf('wkhtmltopdf') !== -1);
}

function isPdfRequest(){
    // simplify testing
    return typeof isPdf === 'undefined' ? false : isPdf;
    //return (navigator.userAgent.indexOf('chromepdf') !== -1) || isOldPdfRequest();
}

function sendAudit(components) {
    $.post(infoUrls['reportAnalytics'].url, {
        wid:websiteId,
        components:components,
        user_id:userId,
        owner_id:ownerId,
        current_page:currentPage,
        referrer:referrer
    });
}

function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}

/**
 * history.pushState probably should update the CSS :target selector, since using the browser back and forward buttons to navigate back and forward after using history.pushState does indeed update it.
 * It has an open BUG in webkit, and there is talk of standardizing the behavior to be one way or the other, rather than the current inconsistent behavior.
 * If they choose to make it update the CSS, then your code will just work as-is.
 *
 * @param url
 */
function removeHashFromCurrentUrl(url) {
    history.pushState({}, document.title, url); // called as you would normally
    const onpopstate = window.onpopstate; // store the old event handler to restore it later
    window.onpopstate = function() { // this will be called when we call history.back()
        window.onpopstate = onpopstate; // restore the original handler
        history.forward(); // go forward again to update the CSS
    };
    history.back(); // go back to trigger the above function

    return true;
}

window.onpageshow = function() {
    $('#options-template').trigger('change');
}
