import { LinkChecker } from 'linkinator';
import { Octokit } from '@octokit/rest';

const octokit = new Octokit({
  auth: process.env.GITHUB_TOKEN
});

async function createGitHubIssue(brokenLinks: any[]) {
  const body = `## üîó Broken Links Detected

**Found ${brokenLinks.length} broken link(s):**

${brokenLinks.map(link => `
- **URL**: ${link.url}
- **Status**: ${link.status}
- **Parent**: ${link.parent}
`).join('\n')}

**Action Required**: Please fix these broken links to maintain SEO health.

---
*Auto-generated by SEO Link Checker*
`;

  await octokit.issues.create({
    owner: 'varungor365',
    repo: 'fuc-website',
    title: `üîó Broken Links Found - ${new Date().toLocaleDateString()}`,
    body,
    labels: ['seo', 'bug', 'high-priority']
  });
}

async function checkLinks() {
  console.log('üîç Starting link check...');

  const checker = new LinkChecker();
  const result = await checker.check({
    path: 'https://www.fashun.co.in',
    recurse: true,
    timeout: 10000,
    linksToSkip: [
      'https://www.facebook.com',
      'https://www.instagram.com',
      'https://twitter.com'
    ]
  });

  const brokenLinks: any[] = [];

  result.links.forEach(link => {
    if (link.state === 'BROKEN') {
      brokenLinks.push({
        url: link.url,
        status: link.status,
        parent: link.parent
      });
      console.log(`‚ùå Broken: ${link.url} (${link.status})`);
    }
  });

  if (brokenLinks.length > 0) {
    console.log(`\n‚ö†Ô∏è Found ${brokenLinks.length} broken links`);
    await createGitHubIssue(brokenLinks);
    console.log('‚úÖ GitHub issue created');
  } else {
    console.log('‚úÖ No broken links found!');
  }

  console.log('\nüìä Summary:');
  console.log(`Total links checked: ${result.links.length}`);
  console.log(`Broken links: ${brokenLinks.length}`);
  console.log(`Success rate: ${((1 - brokenLinks.length / result.links.length) * 100).toFixed(2)}%`);
}

checkLinks();
